#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Implementacja
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap:implementation"

\end_inset

Projekt systemu zakładał napisanie go w języku C# w środowisku .NET Framework
 4.5
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Microsoft.NET"

\end_inset

 i umożliwienie wykonywania kodu użytkownika z bibliotek skompilowanych
 do kodu zarządzalnego dla .NET Framework w wersji nie nowszej niż 4.5.
 Testy wykonania kodu użytkownika zostały przeprowadzone z użyciem aplikacji
 napisanych w językach C# oraz F#.
 
\end_layout

\begin_layout Standard
System Bluepath działa na klastrze węzłów obliczeniowych.
 Na każdym węźle musi zostać uruchomiona binarnie zgodna wersja aplikacji
 (w stopniu umożliwiającym wykonanie dowolnej metody z dowolnej klasy będącej
 częścią procesu za pomocą zserializowanego uchwytu otrzymanego w ramach
 zlecenia pod pewnymi warunkami opisanymi w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:implementation-Rozproszony-watek"

\end_inset

).
 W ramach jednego z wątków uruchamiana jest usługa nasłuchująca wywołań
 -- zleceń, zapytań przychodzących od pozostałych węzłów.
\end_layout

\begin_layout Section
Komunikacja
\end_layout

\begin_layout Standard
W sieci komunikacyjnej w warstwie transportowej działa protokół TCP 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc675,rfc793,rfc1122"

\end_inset

, który realizuje gwarancje niezawodnego dostarczenia wiadomości z użyciem
 mechanizmu potwierdzeń i retransmisji zgodnie z założeniem przyjętym w
 punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:concept-Komunikacja"

\end_inset

 ppkt.
 1.
 Komunikacja między węzłami została zrealizowana w modelu RPC (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:background-RPC"

\end_inset

) za pomocą WCF (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:background-WCF"

\end_inset

).
 Połączenia realizowane są za pomocą protokołu HTTP 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc2616"

\end_inset

, a wiadomości są przesyłane zgodnie z protokołem SOAP 
\begin_inset CommandInset citation
LatexCommand cite
key "W3C-SOAP11,W3C-SOAP12-part0,W3C-SOAP12-part1"

\end_inset

, co spełnia wymagania postawione w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:concept-Komunikacja"

\end_inset

 ppkt.
 2.
 Z uwagi na losowy wybór numerów portów założono, że na maszynach nie działa
 zapora ogniowa (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:background-Firewall"

\end_inset

) blokująca połączenia przychodzące na portach o wysokich numerach.
 W sieci nie może także działać mechanizm NAT (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:background-NAT"

\end_inset

), co uniemożliwiłoby realizację bezpośredniej komunikacji między węzłami.
 
\end_layout

\begin_layout Standard
Wątek nasłuchujący jest reprezentowany przez obiekt klasy 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BluepathListener
\end_layout

\end_inset

.
 Wewnętrznie tworzy on instancję klasy faktycznie nasłuchującej na losowym
 porcie na wiadomości zgodne z interfejsem 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
IRemoteExecutorService
\end_layout

\end_inset

, który został przedstawiony na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:implementation-Interfejs-IRemoteExecutorService"

\end_inset

, a szczegółowy opis protokołu znajduje się w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:implementation-Wykonawca"

\end_inset

 poświęconym 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wykonawcom
\end_layout

\end_inset

.
 Dokonywana jest też rejestracja w 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usłudze odnajdywania węzłów
\end_layout

\end_inset

.
 Jeżeli w ramach jednego procesu zostanie utworzone kilka instancji klasy
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BluepathListener
\end_layout

\end_inset

 każda z nich będzie nasłuchiwała na innym porcie i posiadała własną kolekcję
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
lokalnych wykonawców
\end_layout

\end_inset

.
 Lista znanych 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zdalnych wykonawców
\end_layout

\end_inset

 jest współdzielona w ramach procesu przez wszystkie wątki nasłuchujące.
 
\end_layout

\begin_layout Standard
W systemie każdy węzeł może komunikować się z dowolnym innym, o ile zna
 jego adres IP i numer portu, pod którym działa usługa.
 Komunikaty, zarówno wywołania (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
request
\end_layout

\end_inset

) jak i wywołania zwrotne (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
callback
\end_layout

\end_inset

), mają charakter asynchroniczny.
 Istnieje również możliwość wyłączenia wywołań zwrotnych i przełączenia
 systemu w tryb pracy z odpytywaniem (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
polling
\end_layout

\end_inset

).
 Wprowadza on dodatkowe opóźnienia, co dyskwalifikuje go w przypadku prowadzenia
 w klastrze faktycznych obliczeń, znajduje jednak zastosowanie w niektórych
 scenariuszach realizowanych w środowisku testowym.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-można przekonfigurować na coś innego
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[Sharp]C},numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Interfejs IRemoteExecutorService
\begin_inset CommandInset label
LatexCommand label
name "lis:implementation-Interfejs-IRemoteExecutorService"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[ServiceContract]
\end_layout

\begin_layout Plain Layout

public interface IRemoteExecutorService
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    Guid Initialize(byte[] methodHandle);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    void Execute(Guid eId, object[] parameters, ServiceUri callbackUri);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    void ExecuteCallback(Guid eid, RemoteExecutorServiceResult executeResult);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    RemoteExecutorServiceResult TryJoin(Guid eId);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    PerformanceStatistics GetPerformanceStatistics();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Usługa odnajdywania węzłów
\end_layout

\begin_layout Standard
Obecna implementacja zawiera usługę odnajdywania węzłów zrealizowaną w sposób
 scentralizowany, a każdy z węzłów podłączających się do klastra musi znać
 adres IP i numer portu, pod którym działa 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługa odnajdywania węzłów
\end_layout

\end_inset

.
 Usługa udostępnia metody służące do zarejestrowania się węzła (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Register
\end_layout

\end_inset

), wyrejestrowania się węzła (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Unregister
\end_layout

\end_inset

), pobrania listy zarejestrowanych w klastrze węzłów (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
GetAvailableServices
\end_layout

\end_inset

), oraz pobrania statystyk wydajności wszystkich węzłów w klastrze (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
GetPerformanceStatistics
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={[Sharp]C},numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Interfejs ICentralizedDiscoveryService
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[ServiceContract]
\end_layout

\begin_layout Plain Layout

public interface ICentralizedDiscoveryService
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    ServiceUri[] GetAvailableServices();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    void Register(ServiceUri uri);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    void Unregister(ServiceUri uri);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    Task<Dictionary<ServiceUri, PerformanceStatistics>> GetPerformanceStatistics
();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Pamięć rozproszona
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
nie implementujemy sami bo nie taki cel pracy
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zgodnie z założeniami zaprezentowanymi w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:concept-Rozproszona-pamięć-współdzielona"

\end_inset

, interfejs 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IStorage
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
tutaj niewiadomo skąd pojawia się nagle nazwa 'IStorage', brakuje wprowadzenia
\end_layout

\end_inset

 wymaga implementacji metod do operacji na pojedynczych wartościach: 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Store
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
StoreOrUpdate
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Update
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Retrieve
\end_layout

\end_inset

 i 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Remove
\end_layout

\end_inset

 oraz operacji zbiorczych: 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkStore
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkStoreOrUpdate
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkUpdate
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkRetrieve
\end_layout

\end_inset

 i 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkRemove
\end_layout

\end_inset

.
 Dodatkowo zdefiniowany został interfejs 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IExtendedStorage
\end_layout

\end_inset

 rozszerzający podstawowy interfejs 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IStorage
\end_layout

\end_inset

 o operacje pobrania i zwolnienia 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamków rozproszonych
\end_layout

\end_inset

: 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
AcquireLock
\end_layout

\end_inset

 (w wersji z limitem czasu i bez) oraz 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ReleaseLock
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Rozważane rozwiązania 
\end_layout

\begin_layout Standard
Podjęto decyzje o skorzystaniu z jednego z istniejących rozwiązań do zrealizowan
ia koncepcji 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

.
 Początkowo pod uwagę brane były następujące aplikacje:
\begin_inset Note Note
status open

\begin_layout Plain Layout
dodać cytowania i Redisa, zaznaczyć 2 fazy
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Memcached 
\begin_inset CommandInset citation
LatexCommand cite
key "Memcached"

\end_inset

 -- niestety projekt był aktualizowany ostatni raz w roku 2013 a jego implementa
cja opiera się o .NET Framework 2.0 wydany w 2005 roku,
\end_layout

\begin_layout Itemize
Riak 
\begin_inset CommandInset citation
LatexCommand cite
key "Riak"

\end_inset

 -- który jest implementacją Amazon Dynamo 
\begin_inset CommandInset citation
LatexCommand cite
key "Amazon-Dynamo"

\end_inset

, odrzucony ze względu na brak API dla .NET Framework,
\end_layout

\begin_layout Itemize
Polyphony 
\begin_inset CommandInset citation
LatexCommand cite
key "Polyphony-blog-1,Polyphony-blog-2,Polyphony-blog-3,Polyphony-repo"

\end_inset

 -- eksperymentalny projekt rozproszonej tablicy haszowej napisany w języku
 F#, nie wybrano ze względu na wczesnorozwojowy charakter projektu,
\end_layout

\begin_layout Itemize
Rhino DHT 
\begin_inset CommandInset citation
LatexCommand cite
key "Rhino-DHT"

\end_inset

 -- implementacja rozproszonej tablicy haszowej w języku C#; posiada zależności
 do Rhino PHT (
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
persistent hash table
\end_layout

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "Rhino-PHT"

\end_inset

 oraz Rhino Queues 
\begin_inset CommandInset citation
LatexCommand cite
key "Rhino-Queues"

\end_inset

,
\end_layout

\begin_layout Standard
a w późniejszym okresie również:
\end_layout

\begin_layout Itemize
Redis 
\begin_inset CommandInset citation
LatexCommand cite
key "Redis"

\end_inset

 -- ...
\end_layout

\begin_layout Standard
Początkowo wybrane zostało rozwiązanie Rhino DHT, które było aktywnie rozwijane
 przez rozpoznawalnego autora -- Ayende Rahiena.
 Niestety, okazało się, że wersjonowanie danych nie zostało w pełni zaimplemento
wane i nie było możliwe wykonanie atomowej operacji ,,odczytaj i zapisz'',
 która była niezbędna do zrealizowania 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamków rozproszonych
\end_layout

\end_inset

.
 Szczegóły tego problemu zostały przedstawione w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:problemy-rhino-dht"

\end_inset

.
 
\end_layout

\begin_layout Standard
Kolejnym rozwiązaniem wziętym pod uwagę był Redis.
 Jest to otwartoźródłowy system przechowujący dane typu klucz-wartość autorstwa
 Salvatore Sanfilippo oraz Pietera Noordhuisa.
 Jest używany na co dzień jako mechanizm pamięci podręcznej wielu serwisów
 internetowych (m.in.
 cała rodzina StackExchange) - posiada przez to duże wsparcie i aktywnie
 działającą społeczność.
 Redis potrafi działać zarówno jako pojedynczy proces jak i w trybie master-slav
e, ponadto rozwijana jest wersja rozproszona -- Redis Cluster.
 System ten posiada biblitekę dla .NET Framework dostarczoną przez firmę
 StackExchange.
 Redis został napisany dla rodziny systemów operacyjnych Linux, powstał
 jednak port tego systemu do systemu operacyjnego Windows.
 Problemy, które napotkano podczas uruchamiania usługi Redis (opisane w
 punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:problemy-Windows-Redis"

\end_inset

) udało się rozwiązać, przez co system ten został wykorzystany w ostatecznej
 wersji pracy i w testach.
\end_layout

\begin_layout Subsection
Rozproszone struktury danych i obiekty
\end_layout

\begin_layout Standard
Struktury danych i obiekty, które mogą być współdzielone między wątkami
 zaimplementowane zostały w oparciu o 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięć rozproszoną
\end_layout

\end_inset

, zdefiniowaną za pomocą interfejsu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IExtendedStorage
\end_layout

\end_inset

 - pozwoliło to zastosować 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamki rozproszone
\end_layout

\end_inset

 w celu zapewnienia poprawności przetwarzania.
 Każdy obiekt jest identyfikowany przez klucz będący łańcuchem znaków.
 W przypadku listy czy słownika na podstawie klucza wywiedzione zostają
 identyfikatory obiektów składających się na daną strukturę -- zamków, metadanyc
h i poszczególnych wartości.
 
\end_layout

\begin_layout Paragraph
Lista
\end_layout

\begin_layout Standard
Lista implementuje standardowy generyczny interfejs 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IList<T>
\end_layout

\end_inset

 z przestrzeni nazw 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
System.Collections.Generic
\end_layout

\end_inset

.
 Próba pobrania enumeratora zwraca obiekt klasy 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
DistributedListEnumerator
\end_layout

\end_inset

, który umożliwia iterowanie po kolekcji.
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Lista rozproszona
\end_layout

\end_inset

 została rozszerzona o operację 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
CopyPartTo
\end_layout

\end_inset

 - jest to odpowiednik operacji 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
CopyTo
\end_layout

\end_inset

 (efektywnej operacji kopiowania całej zawartości listy do wskazanej tablicy),
 który pozwala skopiować wybrany fragment listy w sposób efektywny i atomowy.
 Operacja ta jest szczególnie przydatna przy przetwarzaniu rozproszonym,
 gdzie dane znajdują się w wolnej 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 (w stosunku do pamięci podręcznej), a każdy 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątek rozproszony
\end_layout

\end_inset

 przetwarza fragment danych.
\end_layout

\begin_layout Paragraph
Słownik
\end_layout

\begin_layout Standard
Słownik implementuje standardowy generyczny interfejs 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IDictionary<TKey, TValue>
\end_layout

\end_inset

 z przestrzeni nazw 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
System.Collections.Generic
\end_layout

\end_inset

.
 Próba pobrania enumeratora zwraca obiekt klasy 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
DistributedDictionaryEnumerator
\end_layout

\end_inset

, który umożliwia iterowanie po kolekcji.
 
\end_layout

\begin_layout Paragraph
Licznik
\end_layout

\begin_layout Standard
W wielu scenariuszach (przykładowy scenariusz opisany w 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:koncepcja-distributed-counter"

\end_inset

) przydatnym obiektem może być 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
licznik rozproszony
\end_layout

\end_inset

.
 Zaimplementowana klasa 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
DistributedCounter
\end_layout

\end_inset

 udostępnia następujące operacje: 
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
GetValue
\end_layout

\end_inset

 -- pobiera aktualną wartość licznika,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
SetValue
\end_layout

\end_inset

 -- ustawia podaną liczbę jako wartość licznika,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Increase
\end_layout

\end_inset

 -- zwiększa wartość licznika o podaną wartość,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Decrease
\end_layout

\end_inset

 -- zmniejsza wartość licznika o podaną wartość,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
GetAndIncrease
\end_layout

\end_inset

 -- atomowo pobiera aktualną wartość licznika i zwiększa ją o wskazaną liczbę,
 gdzie liczba o którą ma zostać zwiększony licznik może być ujemna.
\end_layout

\begin_layout Section
Wątek rozproszony
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:implementation-Rozproszony-watek"

\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
DistributedThread
\end_layout

\end_inset

 to klasa, której instancje reprezentują jednostkę przetwarzania w systemie.
 Wątek taki tworzony jest na podstawie delegatu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Func
\end_layout

\end_inset

 opakowującego statyczną (nazwaną lub anonimową) metodę.
 Liczba parametrów wejściowych takiej metody to maksymalnie 16 (jest to
 ograniczenie wprowadzone przez deklaracje typu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Func
\end_layout

\end_inset

 dostępne w .NET Framework).
 Wszystkie typy parametrów oraz typ zwracany muszą być oznaczone atrybutem
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Serializable
\end_layout

\end_inset

.
 Środowisko zakłada izolację pomiędzy wątkami: wątki działające w ramach
 jednego procesu--hosta nie mogą komunikować się ze sobą poprzez pamięć
 operacyjną, a parametry, z którymi wywoływana jest metoda są kopiowane
 do nowych instancji klas i struktur.
 Wyjątkiem jest tutaj dostarczana przez środowisko 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięć rozproszona
\end_layout

\end_inset

.
 W tym przypadku programista powinien stosować dostarczone wraz z nią mechanizmy
 synchronizacji.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Zapis do pamięci współdzielonej jest thread-safe? Jeżeli tak, można o tym
 napisać.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Wykonawca
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:implementation-Wykonawca"

\end_inset

Poniżej opisane zostały szczegóły protokołu komunikacyjnego (rys.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:implementation-Protokol-IRemoteExecutorService"

\end_inset

) używanego przez węzły obliczeniowe oraz szczegóły implementacji 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wykonawców
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template RasterImage
	filename images/diagram-protokolu.png
	lyxscale 15

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:implementation-Protokol-IRemoteExecutorService"

\end_inset

Diagram protokołu komunikacyjnego węzłów obliczeniowych
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Inicjalizacja
\end_layout

\begin_layout Standard
Każdy wykonawca jest identyfikowany przez 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
eid
\end_layout

\end_inset

 (
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Executor ID
\end_layout

\end_inset

) -- unikalną 128-bitową liczbę (GUID), przy czym instancja 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zdalnego wykonawcy
\end_layout

\end_inset

 używa takiego samego identyfikatora jak 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
lokalny wykonawca
\end_layout

\end_inset

, który został zainicjowany do wykonania kodu użytkownika.
 Wiadomość inicjująca wątek 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Initialize
\end_layout

\end_inset

 zawiera element 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
methodHandle
\end_layout

\end_inset

, w którym przesyłany jest zserializowany binarnie i zapisany w kodowaniu
 Base64 uchwyt do metody.
 W odpowiedzi przesyłany jest identyfikator wykonawcy.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:implementation-SOAP-Initialize"

\end_inset

 przedstawia w skróconej formie przykładową przechwyconą kopertę SOAP z
 wiadomością 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Initialize
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:implementation-SOAP-Initialize"

\end_inset

Koperta SOAP -- inicjalizacja zdalnego wykonawcy
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
\end_layout

\begin_layout Plain Layout

	<s:Body>
\end_layout

\begin_layout Plain Layout

		<Initialize xmlns="http://tempuri.org/">
\end_layout

\begin_layout Plain Layout

			<methodHandle>AAEAAAD/////AQAAAAAAAAAMAgAAAD9[...]==</methodHandle>
\end_layout

\begin_layout Plain Layout

		</Initialize>
\end_layout

\begin_layout Plain Layout

	</s:Body>
\end_layout

\begin_layout Plain Layout

</s:Envelope>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:implementation-SOAP-Initialize-decBase64"

\end_inset

 prezentuje fragment uchwytu do metody po zdekodowaniu i usunięciu znaków
 spoza drukowalnego zestawu symboli ASCII.
 DistributedPI to przykładowy program opisany szerzej w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Przykladowe-zastosowania-liczba-pi"

\end_inset

.
 Uchwyt dotyczy metody anonimowej (stąd wygenerowana przez kompilator nazwa
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
b__0
\end_layout

\end_inset

) zdefiniowanej w klasie 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Bluepath.DistributedPI.Program
\end_layout

\end_inset

, która jako parametr przyjmuje 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
int
\end_layout

\end_inset

 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
System.Int32
\end_layout

\end_inset

) a typem zwracanym jest 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
long
\end_layout

\end_inset

 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
System.Int64
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Assembler,numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:implementation-SOAP-Initialize-decBase64"

\end_inset

Zdekodowany fragment uchwytu do anonimowej metody
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[...] System.Type[]
\end_layout

\begin_layout Plain Layout

<RunTest>b__0 MBluepath.DistributedPI, Version=1.0.0.0, Culture=neutral, 
\end_layout

\begin_layout Plain Layout

PublicKeyToken=null Bluepath.DistributedPI.Program
\end_layout

\begin_layout Plain Layout

Int64 <RunTest>b__0(Int32) (System.Int64 <RunTest>b__0(System.Int32) 
\end_layout

\begin_layout Plain Layout

System.UnitySerializationHolder Data	UnityType AssemblyName
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
ThreadPool - zhejtować można (ale trochę) - nie można przerywać zadań.
 Sprawdzanie stanu wątków.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Przesłanie parametrów, wykonanie
\end_layout

\begin_layout Standard
W kolejnej wiadomości
\begin_inset Note Note
status open

\begin_layout Plain Layout
nie jest jasne, że kontynuujemy opis protokołu
\end_layout

\end_inset

 węzeł zlecający przesyła parametry wywołania metody.
 Przechwycona koperta z komunikatem 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Execute
\end_layout

\end_inset

 znajduje się na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:implementation-SOAP-Execute"

\end_inset

.
 Warto zauważyć, że ustawiona jest tutaj wartość pola 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
callbackUri
\end_layout

\end_inset

, co oznacza, że węzeł wywołujący otrzyma komunikat 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ExecuteCallback
\end_layout

\end_inset

 po zakończeniu przetwarzania po zdalnej stronie.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,language=XML,numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:implementation-SOAP-Execute"

\end_inset

Koperta SOAP -- przesłanie paramterów
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
\end_layout

\begin_layout Plain Layout

	<s:Body>
\end_layout

\begin_layout Plain Layout

		<Execute xmlns="http://tempuri.org/">
\end_layout

\begin_layout Plain Layout

			<eId>6a3ff0e2-601b-4683-a163-7f6da037c762</eId>
\end_layout

\begin_layout Plain Layout

			<parameters xmlns:a="http://schemas.microsoft.com/2003/10/Serialization/Arrays"
 xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
\end_layout

\begin_layout Plain Layout

				<a:anyType i:type="b:int" xmlns:b="http://www.w3.org/2001/XMLSchema">10000</a:
anyType>
\end_layout

\begin_layout Plain Layout

			</parameters>
\end_layout

\begin_layout Plain Layout

			<callbackUri xmlns:a="http://schemas.datacontract.org/2004/07/Bluepath.Services"
 xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
\end_layout

\begin_layout Plain Layout

				<a:Address>http://192.168.0.7:51000/BluepathExecutorService.svc</a:Address>
\end_layout

\begin_layout Plain Layout

				<a:BindingType>BasicHttpBinding</a:BindingType>
\end_layout

\begin_layout Plain Layout

			</callbackUri>
\end_layout

\begin_layout Plain Layout

		</Execute>
\end_layout

\begin_layout Plain Layout

	</s:Body>
\end_layout

\begin_layout Plain Layout

</s:Envelope>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lokalny wykonawca szereguje wątki do wykonania używając dostarczonej przez
 środowisko .NET Framework puli wątków (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ThreadPool
\end_layout

\end_inset

).
 Podejście to ma swoje wady -- tracona jest kontrola nad tak stworzonymi
 wątkami, nie można ich przerwać lub sprawdzić ich stanu (uniemożliwia to
 np.
 realizację detekcji zakleszczenia).
 W przypadku, gdy w kodzie użytkownika wystąpi wyjątek, zostanie on przechwycony
 przez środowisko, zserializowany i udostępniony wywołującemu wątkowi do
 odczytu.
\end_layout

\begin_layout Subsection
Wywołanie zwrotne
\end_layout

\begin_layout Standard
Po zakończeniu metody w trybie z wywołaniem zwrotnym, zdalna strona przesyła
 wynik, ew.
 wyjątki oraz czas jaki zajęło przetwarzanie do zlecającej maszyny.
 Przykładowy komunikat 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ExecuteCallback
\end_layout

\end_inset

 przedstawia listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:implementation-SOAP-ExecuteCallback"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,language=XML,numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:implementation-SOAP-ExecuteCallback"

\end_inset

Koperta SOAP -- wywołanie zwrotne z wynikiem
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
\end_layout

\begin_layout Plain Layout

	<s:Body>
\end_layout

\begin_layout Plain Layout

		<ExecuteCallback xmlns="http://tempuri.org/">
\end_layout

\begin_layout Plain Layout

			<eid>6a3ff0e2-601b-4683-a163-7f6da037c762</eid>
\end_layout

\begin_layout Plain Layout

			<executeResult xmlns:a="http://schemas.datacontract.org/2004/07/Bluepath.Service
s" xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
\end_layout

\begin_layout Plain Layout

				<a:ElapsedTime>PT0.0125743S</a:ElapsedTime>
\end_layout

\begin_layout Plain Layout

				<a:Error i:nil="true" xmlns:b="http://schemas.datacontract.org/2004/07/System"
/>
\end_layout

\begin_layout Plain Layout

				<a:ExecutorState>Finished</a:ExecutorState>
\end_layout

\begin_layout Plain Layout

				<a:Result i:type="b:long" xmlns:b="http://www.w3.org/2001/XMLSchema">7857</a:R
esult>
\end_layout

\begin_layout Plain Layout

			</executeResult>
\end_layout

\begin_layout Plain Layout

		</ExecuteCallback>
\end_layout

\begin_layout Plain Layout

	</s:Body>
\end_layout

\begin_layout Plain Layout

</s:Envelope>
\end_layout

\end_inset


\end_layout

\begin_layout Section
Planista
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Musi on implementować interfejs 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
IScheduler
\end_layout

\end_inset

.
 Pozwala to zastosować implementację Planisty dostosowaną do potrzeb przetwarzan
ia i jest jednym z istotnych elementów modułowości sys
\end_layout

\end_inset

Wraz z systemem dostarczone zostały następujące typy planistów:
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ThreadNumberScheduler
\end_layout

\end_inset

 -- szereguje zadania na najmniej obciążonym węźle pod względem liczby wykonywan
ych na nim wątków,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
RoundRobinScheduler
\end_layout

\end_inset

 -- szereguje zadania korzystając z algorytmu cyklicznego (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
round robin
\end_layout

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "Tannenbaum-SOP"

\end_inset

.
\end_layout

\begin_layout Standard
Poniżej opisane zostały szczegółowo ich implementacje.
 
\end_layout

\begin_layout Subsection
Szeregowanie zadań w oparciu o obciążenie węzłów
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:implementacja-szeregowanie-zadan-threadcount"

\end_inset

Jednym z podstawowych sposobów szeregowania zadań jest próba równomiernego
 rozłożenia obciążenia węzłów.
 Zakładając, że wszystkie zadania mają podobny rozmiar, jako miarę obciążenia
 konkretnego węzła można przyjąć liczbę zadań, które są obecnie przetwarzane,
 lub oczekują na rozpoczęcie przetwarzania.
\end_layout

\begin_layout Standard
W przykładowej implementacji dostarczanej wraz z biblioteką 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Bluepath
\end_layout

\end_inset

 informacje o obecnym obciążeniu węzłów są okresowo odświerzane prz pomocy
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługi odnajdywania węzłów
\end_layout

\end_inset

.
 W zależności od szybkości tworzenia nowych 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątków rozproszonych
\end_layout

\end_inset

 oraz częstotliwości odświerzania informacji o obciążeniu węzłów lokalne
 dane mogą szybko stać się nieaktualne.
 Można ten efekt złagodzić poprzez zwiększanie zapamiętanego obciążenia
 o wysłane na dany węzeł wątki.
\end_layout

\begin_layout Subsection
Szeregowanie zadań za pomocą algorytmu cyklicznego
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:Implementacja-Szeregowanie-karuzelowy"

\end_inset

W pewnych zastosowaniach pewne zrównowarzenie obciążenia można osiągnąć
 poprzez zastosowanie algorytmu cyklicznego.
 Algorytm ten nie wymaga pobierania informacji o obciążeniu węzłów z 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługi odnajdywania węzłów
\end_layout

\end_inset

, przez co posiada mniejszy narzut komunikacyjny od algorytmów wymagających
 tych informacji.
 
\end_layout

\begin_layout Section
Logowanie zdarzeń
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:implementation-Logowanie-zdarzen"

\end_inset

Za zbieranie informacji na temat zdarzeń zachodzących w systemie odpowiada
 klasa 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Log
\end_layout

\end_inset

 udostępniająca m.
 in.
 statyczne metody:
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ExceptionMessage
\end_layout

\end_inset

 -- do logowania wyjątków,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
TraceMessage
\end_layout

\end_inset

 -- do logowania pozostałych zdarzeń.
\end_layout

\begin_layout Standard
Istnieje możliwość przekierowania wszystkich informacji do 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

.
 W tym celu należy ustawić flagę 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
WriteToDistributedMemory
\end_layout

\end_inset

 oraz uzupełnić nazwę hosta 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
DistributedMemoryHost
\end_layout

\end_inset

), do którego ma odbywać się zapis.
 Warto zwrócić uwagę, że tryb pracy ze zbieraniem historii zdarzeń w 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

 może istotnie ograniczać wydajność systemu.
 W celu zmaterializowania zebranego logu udostępniona została metoda 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
SaveXes
\end_layout

\end_inset

, która zapisuje wszystkie zgromadzone we 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 zdarzenia do pliku XML w formacie OpenXES.
 
\end_layout

\begin_layout Standard
Implementacja standardu została wykonana na podstawie zmodyfikowanych plików
 XSD (pkt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:background-XSD"

\end_inset

) udostępnionych wraz z biblioteką OpenXES 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenXES"

\end_inset

 w wersji 2.0 (przyczyny i sposób modyfikacji został opisany w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:problemy-Implementacja-standardu-OpenXES-z-XSD"

\end_inset

).
 Szkielet klas został wygenerowany przy użyciu narzędzia XML Schema Definition
 Tool 
\begin_inset CommandInset citation
LatexCommand cite
key "XML-Schema-Definition-Tool"

\end_inset

 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
xsd.exe
\end_layout

\end_inset

) dostarczanego wraz ze środowiskiem programistycznym .NET Framework 4.5.1.
 Przykład użycia programu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
xsd.exe
\end_layout

\end_inset

 został zaprezentowany na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:implementation-Skrypt-generujący-klasy-z-XSD"

\end_inset

.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "s"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "breaklines=true,language=bash,numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:implementation-Skrypt-generujący-klasy-z-XSD"

\end_inset

Skrypt generujący klasy w języku C# na podstawie pliku XSD dla formatu OpenXES
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

"c:
\backslash
Program Files (x86)
\backslash
Microsoft SDKs
\backslash
Windows
\backslash
v8.1A
\backslash
bin
\backslash
NETFX 4.5.1 Tools
\backslash
xsd.exe" xes.xsd /classes /o:../Bluepath/Reporting/ 
\end_layout

\begin_layout Plain Layout

"c:
\backslash
Program Files (x86)
\backslash
Microsoft SDKs
\backslash
Windows
\backslash
v8.1A
\backslash
bin
\backslash
NETFX 4.5.1 Tools
\backslash
xsd.exe" xesext.xsd /classes /o:../Bluepath/Reporting/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
tutaj jakby czegoś brakuje
\end_layout

\end_inset

Zdarzenie jest wynikiem zarejestrowania 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
aktywności
\end_layout

\end_inset

 (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
activity
\end_layout

\end_inset

).
 Rodzaje aktywności zachodzących w systemie zostały zdefiniowane w formie
 typu wyliczeniowego 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Bluepath.Reporting.Log.Activity
\end_layout

\end_inset

, obejmuje on m.
 in.:
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Service_is_ready
\end_layout

\end_inset

 -- zgłoszenie przez węzeł gotowości do przyjęcia zleceń,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Local_executor_started_running_user_code
\end_layout

\end_inset

 -- rozpoczęcie wykonywania kodu użytkownika w ramach rozproszonego wątku,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Local_executor_finished_running_user_code
\end_layout

\end_inset

 -- zakończenie wykonywania kodu użytkownika na węźle ,
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Sending_callback_with_result
\end_layout

\end_inset

 -- wysłanie wywołania zwrotnego z wynikiem działania wątku.
\end_layout

\begin_layout Standard
Wszystkie zdarzenia, które są mało istotne dla analizy procesu mogą być
 grupowane w ramach aktywności 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Info
\end_layout

\end_inset

 i powinny zostać odfiltrowane w pierwszej fazie analizy.
 Jeżeli użytkownik chce użyć własnej nazwy dla zdarzenia, może to zrobić
 korzystając z aktywności 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Custom
\end_layout

\end_inset

, a właściwą nazwę przekazać jako parametr 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
message
\end_layout

\end_inset

 do metody logowania zdarzeń.
 
\end_layout

\begin_layout Standard
Jako 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zasób
\end_layout

\end_inset

 (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
resource
\end_layout

\end_inset

) wskazywany jest zawsze wykonawca, który dokonał wpisu, korzystając z jego
 unikalnego identyfikatora 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
eid
\end_layout

\end_inset

.
 Implementacja zakłada możliwość skrócenia zapisu do n ostatnich znaków
 składających się na identyfikator w celu ułatwienia analizy przez człowieka.
 Może to potencjalnie wpłynąć na fałszywe sklasyfikowanie różnych zasobów
 jako tego samego w wyniku kolizji tak skonstruowanych identyfikatorów.
\end_layout

\begin_layout Standard
Zależności czasowe są istotną częścią analizy przebiegu procesu.
 Z wykorzystaniem serwerów czasu NTP 
\begin_inset CommandInset citation
LatexCommand cite
key "rfc5905"

\end_inset

 możliwe jest zsynchronizowanie zegarów węzłów w klastrze z dokładnością
 do milisekund (przy dużych odległościach od serwera czasu -- dziesiątek
 milisekund) 
\begin_inset CommandInset citation
LatexCommand cite
key "Mills-NTP-IEEE-Trans"

\end_inset

.
 Może to być niewystarczające do jednoznacznego określenia porządku zdarzeń.
 Klasa 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Log
\end_layout

\end_inset

 zawiera flagę 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
monotonicallyIncreasingLogTime
\end_layout

\end_inset

, której ustawienie uniemożliwia zapisanie dwóch zdarzeń z tym samym znacznikiem
 czasowym poprzez realizowanie dodatkowych operacji podczas zapisu do logu:
\end_layout

\begin_layout Itemize
pobranie 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamka rozproszonego
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize
odczyt ostatnio zapisanej wartości znacznika czasowego z 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize
w przypadku gdy lokalna wartość znacznika jest mniejsza lub równa odczytanemu,
 jest ona zamieniana na odczytaną wartość zwiększoną o 1 milisekundę,
\end_layout

\begin_layout Itemize
zapis bieżącej wartości znacznika czasowego do 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize
zwolnienie 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamka rozproszonego
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
jakiś art.
 o process mining basics: http://www.wiso.uni-hamburg.de/fileadmin/wiso_fs_wi/Publi
kationen/Michael/Gehrke_und_Werner_-_2013_-_Process_Mining_Pre-print_Version.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Section
Interfejs do komunikacji z systemem
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Udostępnianie logu (bo jest statyczny)
\end_layout

\begin_layout Plain Layout
potencjalnie mogłoby być reporting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aby skorzystać z funkcji udostępnianych przez system (jak np.
 pobranie identyfikatora 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wykonawcy
\end_layout

\end_inset

 czy dostęp do 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

) wewnątrz 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątku rozproszonego
\end_layout

\end_inset

, użytkownik musi uzyskać przeznaczony do tego obiekt.
 System automatycznie wstrzykuje go do metod jako jeden z parametrów --
 wystarczy, by był on typu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IBluepathCommunicationFramework
\end_layout

\end_inset

.
 Użytkownika ma również możliwość zapisywania własnych zdarzeń zachodzących
 w aplikacji do logu z użyciem opisanej w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:implementation-Logowanie-zdarzen"

\end_inset

 statycznej klasy 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Log
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Dystrybucja aplikacji w klastrze
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:implementation-Skrypt-Send-Folder"

\end_inset

PowerShell Remoting
\begin_inset Note Note
status open

\begin_layout Plain Layout
[#]
\end_layout

\end_inset

 to usługa umożliwiająca wykonanie na zdalnych maszynach pojedynczych komend
 lub stworzenie pełnej zdalnej sesji PowerShell.
 Automatyzacja procesu dystrybucji plików binarnych systemu w klastrze została
 zrealizowana za pomocą zestawu skryptów: 
\begin_inset Flex Path
status open

\begin_layout Plain Layout
Send-Folder
\end_layout

\end_inset

 do przesyłania całych folderów i 
\begin_inset Flex Path
status open

\begin_layout Plain Layout
Send-File
\end_layout

\end_inset

 do przesyłania pojedynczych plików, z którego korzysta ten pierwszy.
 
\end_layout

\begin_layout Standard
Skrypt do wysyłania pojedynczych plików został zaczerpnięty z książki 
\begin_inset CommandInset citation
LatexCommand cite
key "Windows-PowerShell-Cookbook"

\end_inset

.
 Przyjmuje 3 parametry: ścieżkę do pliku źródłowy znajdującego się na lokalnej
 maszynie, ścieżkę docelową na zdalnej maszynie oraz referencję do obiektu
 zdalnej sesji.
 Plik jest wczytywany do pamięci jako tablica bajtów, następnie jego transfer
 odbywa się strumieniowo w blokach o rozmiarze 1 MB.
 Po zrekonstruowaniu tablicy bajtów na zdalnej stronie jest ona zapisywana
 na dysk we wskazanej lokalizacji.
\end_layout

\begin_layout Standard
Skrypt do wysyłania folderów przedstawiony na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:implementation-Send-Folder"

\end_inset

 przyjmuje jako parametry: 
\end_layout

\begin_layout Itemize
adres zdalnego komputera (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-server
\end_layout

\end_inset

), 
\end_layout

\begin_layout Itemize
opcjonalnie port, na którym nasłuchuje usługa PowerShell Remoting (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-port
\end_layout

\end_inset

), 
\end_layout

\begin_layout Itemize
nazwę użytkownika (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-user
\end_layout

\end_inset

), 
\end_layout

\begin_layout Itemize
hasło (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-password
\end_layout

\end_inset

), 
\end_layout

\begin_layout Itemize
ścieżkę do folderu źródłowego na lokalnej maszynie (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-source
\end_layout

\end_inset

), 
\end_layout

\begin_layout Itemize
oraz ścieżkę do folderu docelowego na zdalnej maszynie (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-destination
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Standard
Skrypt tworzy obiekt zdalnej sesji uwierzytelniając się poprzez podaną nazwę
 użytkownika i hasło.
 W celu uproszczenia etapu konfiguracji środowiska, do wywołania metody
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
New-PSSession
\end_layout

\end_inset

 można dodać przełącznik 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
-SessionOption
\end_layout

\end_inset

 z parametrem 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
New-PSSessionOption -SkipCACheck
\end_layout

\end_inset

.
 Opcja ta powoduje jednak obniżenie poziomu bezpieczeństwa poprzez dopuszczenie
 niezaufanych certyfikatów maszyn.
 Następnie pobierana jest lista plików we wskazanym lokalnym folderze i
 dla każdego z plików wywoływany skrypt 
\begin_inset Flex Path
status open

\begin_layout Plain Layout
Send-File
\end_layout

\end_inset

.
 Pomijane przy tym są pliki z symbolami (
\begin_inset Flex Path
status open

\begin_layout Plain Layout
.pdb
\end_layout

\end_inset

), ponieważ ich rozmiar jest znaczący w stosunku do rozmiaru plików samej
 aplikacji, a nie było konieczne podłączanie 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
debuggera
\end_layout

\end_inset

 do procesów pracujących na zdalnych maszynach.
 Po zakończeniu przesyłania plików zdalna sesja jest zamykana.
 Warto zauważyć, że skrypt 
\begin_inset Flex Path
status open

\begin_layout Plain Layout
Send-Folder
\end_layout

\end_inset

 można wywołać wielokrotnie przekazując w parametrze -server kolejne adresy
 maszyn, aby rozdystrybuować pliki w całym klastrze.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash,numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:implementation-Send-Folder"

\end_inset

Skrypt przesyłający pliki ze wskazanego folderu na zdalną maszynę
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

param (
\end_layout

\begin_layout Plain Layout

	[string]$server = $(throw "-server is required."),
\end_layout

\begin_layout Plain Layout

	[int]$port = 5986,
\end_layout

\begin_layout Plain Layout

	[string]$user = $(throw "-user is required."),
\end_layout

\begin_layout Plain Layout

	[string]$password = $(throw "-password is required."),
\end_layout

\begin_layout Plain Layout

	[string]$source = $(throw "-source is required."),
\end_layout

\begin_layout Plain Layout

	[string]$destination = $(throw "-destination is required.")
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$secPassword = ConvertTo-SecureString $password -AsPlainText -Force
\end_layout

\begin_layout Plain Layout

$credential = New-Object System.Management.Automation.PSCredential($user, $secPassw
ord)
\end_layout

\begin_layout Plain Layout

$uri = New-Object System.Uri("https://" + $server + ":" + $port)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

$session = New-PSSession -ConnectionUri $uri -Credential $credential
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Get-ChildItem -Path $source -File | Foreach-Object {
\end_layout

\begin_layout Plain Layout

	if ($_.Extension -ne ".pdb") {
\end_layout

\begin_layout Plain Layout

		$target = $destination + $_.Name
\end_layout

\begin_layout Plain Layout

		.
\backslash
Send-File.ps1 $_.FullName $target $session
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Disconnect-PSSession $session
\end_layout

\end_inset


\end_layout

\end_body
\end_document
