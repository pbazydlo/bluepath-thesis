#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Implementacja
\end_layout

\begin_layout Standard
System Bluepath działa na klastrze serwerów, na każdym z nich musi być uruchomio
ny proces (jaki?).
 W ramach procesu działa wątek nasłuchujący na zlecenia.
\end_layout

\begin_layout Standard
Implementacja systemu została wykonana w środowisku .NET Framework 4.5 
\begin_inset CommandInset citation
LatexCommand cite
key "Microsoft.NET"

\end_inset

.
\end_layout

\begin_layout Section
Komunikacja
\end_layout

\begin_layout Standard
??? WCF, HTTP (niestety), SOAP (najgorzej)
\end_layout

\begin_layout Standard
można przekonfigurować na coś innego
\end_layout

\begin_layout Standard
bluepathlistener - tworzy serwis hosta, który implementuje 
\begin_inset Flex Code
status collapsed

\begin_layout Plain Layout
IRemoteExecutorService
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Jeżeli w ramach procesu działa więcej niż 1 listener każdy ma swój port
 i swoją kolekcję lokalnych wykonawców, ale współdzielą listę zdalnych wykonawcó
w.
 
\end_layout

\begin_layout Standard
Callbacki vs.
 pooling
\end_layout

\begin_layout Standard
pod spodem jest to właściwie tradycyjny model RPC, ale abstrakcja rozproszonych
 wątków ukrywa to przed użytkownikiem.
\end_layout

\begin_layout Standard
komunikacja z użyciem asynchronicznych wiadomości
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Interfejs IRemoteExecutorService
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[ServiceContract]
\end_layout

\begin_layout Plain Layout

public interface IRemoteExecutorService
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    Guid Initialize(byte[] methodHandle);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    void Execute(Guid eId, object[] parameters, ServiceUri callbackUri);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    void ExecuteCallback(Guid eid, RemoteExecutorServiceResult executeResult);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    RemoteExecutorServiceResult TryJoin(Guid eId);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    [OperationContract]
\end_layout

\begin_layout Plain Layout

    PerformanceStatistics GetPerformanceStatistics();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Usługa odnajdywania węzłów
\end_layout

\begin_layout Standard
Obecna implementacja zawiera usługę odnajdywania węzłów zrealizowaną w sposób
 scentralizowany, a każdy z węzłów podłączających się do klastra musi znać
 adres IP i numer portu, pod którym działa usługa katalogowa.
 Usługa udostępnia metody służące do zarejestrowania się węzła (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Register
\end_layout

\end_inset

), wyrejestrowania się węzła (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Unregister
\end_layout

\end_inset

), pobrania listy zarejestrowanych w klastrze węzłów (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
GetAvailableServices
\end_layout

\end_inset

), oraz pobrania statystyk wydajności wszystkich węzłów w klastrze (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
GetPerformanceStatistics
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Interfejs ICentralizedDiscoveryService
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
[ServiceContract]
\end_layout

\begin_layout Plain Layout
public interface ICentralizedDiscoveryService
\end_layout

\begin_layout Plain Layout
{
\end_layout

\begin_layout Plain Layout
    [OperationContract]
\end_layout

\begin_layout Plain Layout
    ServiceUri[] GetAvailableServices();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
    [OperationContract]
\end_layout

\begin_layout Plain Layout
    void Register(ServiceUri uri);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
    [OperationContract]
\end_layout

\begin_layout Plain Layout
    void Unregister(ServiceUri uri);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
    [OperationContract]
\end_layout

\begin_layout Plain Layout
    Task<Dictionary<ServiceUri, PerformanceStatistics>> GetPerformanceStatistics
();
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Rozproszona pamięć współdzielona
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
nie implementujemy sami bo nie taki cel pracy
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zgodnie z założeniami zaprezentowanymi w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:concept-Rozproszona-pamięć-współdzielona"

\end_inset

, interfejs 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IStorage
\end_layout

\end_inset

 wymaga implementacji metod do operacji na pojedynczych wartościach: 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Store
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
StoreOrUpdate
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Update
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Retrieve
\end_layout

\end_inset

 i 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Remove
\end_layout

\end_inset

 oraz operacji zbiorczych: 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkStore
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkStoreOrUpdate
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkUpdate
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkRetrieve
\end_layout

\end_inset

 i 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BulkRemove
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Rozważane rozwiązania 
\end_layout

\begin_layout Standard
Redis, Rhino DHT, MonoTorrent, Memcached, Rijak, Polyphony (F# rulez).
\end_layout

\begin_layout Standard
Memcached - dawno nie aktualizowany (ostatnia aktualizacja 2013, .NET 2.0)
\end_layout

\begin_layout Standard
Rhino-DHT - throw new NotImplementedException(); więcej w napotkanych problemach
\begin_inset CommandInset ref
LatexCommand ref
reference "par:problemy-rhino-dht"

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
https://github.com/ayende/rhino-dht
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Rijak - implementacja dynamo, brak wsparcia dla .NET
\end_layout

\begin_layout Standard
Polyphony - projekt w fazie experymentalnej, ostatnie zmiany sprzed 4 lat,
 (DHT w F# oparte o Chord)
\end_layout

\begin_layout Standard
Komponent wymienialny
\end_layout

\begin_layout Standard
Redis YEAH!
\end_layout

\begin_layout Standard
Redis - szybki, popularny, dobry klient dla .NET utrzymywany przez StackExchange
\end_layout

\begin_layout Standard
Problemy z redis: 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:problemy-Windows-Redis"

\end_inset


\end_layout

\begin_layout Section
Rozproszony wątek
\end_layout

\begin_layout Standard
\begin_inset Flex Code
status open

\begin_layout Plain Layout
DistributedThread
\end_layout

\end_inset

 to klasa, której instancje reprezentują jednostkę przetwarzania w systemie.
 Wątek taki tworzony jest na podstawie delegatu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Func
\end_layout

\end_inset

 opakowującego statyczną (nazwaną lub anonimową) metodę.
 Liczba parametrów wejściowych takiej metody to maksymalnie 16.
 Wszystkie typy parametrów oraz typ zwracany muszą być oznaczone atrybutem
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Serializable
\end_layout

\end_inset

.
 Środowisko zakłada izolację pomiędzy wątkami: wątki działające w ramach
 jednego procesu--hosta nie mogą komunikować się ze sobą poprzez pamięć
 operacyjną, a parametry, z którymi wywoływana jest metoda są kopiowane
 do nowych instancji klas i struktur.
 Wyjątkiem jest tutaj dostarczana przez środowisko pamięć współdzielona.
 W tym przypadku programista powinien stosować dostarczone wraz z nią mechanizmy
 synchronizacji.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Czy użycie własnych typów może wymagać dodatnia adnotacji KnownType do DataContr
act? http://msdn.microsoft.com/en-us/library/ms730167(v=vs.110).aspx
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Zapis do pamięci współdzielonej jest thread-safe? Jeżeli tak, można o tym
 napisać.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Wykonawca
\end_layout

\begin_layout Standard
Każdy wykonawca jest identyfikowany przez unikalną 128-bitową liczbę (GUID),
 przy czym instancja 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zdalnego wykonawcy
\end_layout

\end_inset

 używa takiego samego identyfikatora jak 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
lokalny wykonawca
\end_layout

\end_inset

, który został zainicjowany do wykonania kodu użytkownika.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
http://blogs.msdn.com/b/oldnewthing/archive/2008/06/27/8659071.aspx
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
ThreadPool - zhejtować można (ale trochę) - nie można przerywać zadań.
 Sprawdzanie stanu wątków.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lokalny wykonawca szereguje wątki do wykonania używając dostarczonej przez
 środowisko .NET Framework puli wątków (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
TheadPool
\end_layout

\end_inset

).
 Podejście to ma swoje wady -- tracona jest kontrola nad tak stworzonymi
 wątkami, nie można ich przerwać lub sprawdzić ich stanu (uniemożliwia to
 np.
 realizację detekcji zakleszczenia).
 W przypadku, gdy w kodzie użytkownika wystąpi wyjątek, zostanie on przechwycony
 przez środowisko, zserializowany i udostępniony wywołującemu wątkowi do
 odczytu.
\end_layout

\begin_layout Section
Planista
\end_layout

\begin_layout Standard
Wraz z systemem dostarczone zostały następujące typy planistów:
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ThreadNumberScheduler
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
formatowanie: name czy code?
\end_layout

\end_inset

 -- szereguje zadania na najmniej obciążonym węźle pod względem liczby wykonywan
ych na nim wątków,
\end_layout

\begin_layout Itemize
i na razie nie ma innych.
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO!
\end_layout

\end_inset


\end_layout

\begin_layout Section
Logowanie zdarzeń
\end_layout

\begin_layout Standard
Za zbieranie informacji na temat zdarzeń zachodzących w systemie odpowiada
 klasa 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Log
\end_layout

\end_inset

 udostępniająca statyczne metody 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ExceptionMessage
\end_layout

\end_inset

 -- do logowania wyjątków i 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
TraceMessage
\end_layout

\end_inset

 -- do logowania pozostałych zdarzeń.
 Istnieje możliwość przekierowania wszystkich informacji do współdzielonej
 pamięci.
\begin_inset Note Note
status open

\begin_layout Plain Layout
jest zahardcodowany new RedisStorage!! (?)
\end_layout

\end_inset

 Udostępnia ona również metodę 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
SaveXes
\end_layout

\end_inset

, która zapisuje wszystkie zgromadzone we współdzielonej pamięci zdarzenia
 zapisuje do pliku XML w formacie OpenXES.
 
\end_layout

\begin_layout Section
Interfejs do komunikacji z systemem
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
[Communication framework] Shared storage access,
\end_layout

\begin_layout Plain Layout
Udostępnianie logu (bo jest statyczny)
\end_layout

\begin_layout Plain Layout
potencjalnie mogłoby być reporting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aby skorzystać z funkcji udostępnianych przez system (jak np.
 pobranie identyfikatora 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wykonawcy
\end_layout

\end_inset

 czy dostęp do wspóldzielonej rozproszonej pamięci) wewnątrz rozproszonego
 wątku, użytkownik musi uzyskać przeznaczony do tego obiekt.
 System automatycznie wstrzykuje go do metod jako jeden z parametrów --
 wystarczy, by był on typu interfejsu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IBluepathCommunicationFramework
\end_layout

\end_inset

.
\end_layout

\end_body
\end_document
