#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_modules
dcs
theorems-ams-bytype
theorems-sec-bytype
theorems-ams-extended-bytype
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Podstawy teorytyczne
\end_layout

\begin_layout Standard
W tym rozdziale przedstawione zostaną terminy wykorzystywane w dalszej części
 pracy oraz zestawienie rozwiązań podobnych tematyką do tej pracy.
\end_layout

\begin_layout Section
Przetwarzanie rozproszone
\begin_inset Note Note
status open

\begin_layout Plain Layout
todo
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:background-Przetwarzanie-rozproszone"

\end_inset

 Przetwarzanie rozproszone
\begin_inset CommandInset citation
LatexCommand cite
key "ArpaciDusseau14-Book"

\end_inset

 jest szeroko stosowanym podejściem w przypadku przetwarzania dużej ilości
 danych, konieczności obsługi wielu zleceń użytkowników w jednostce czasu
 czy zapewnienia niezawodności systemu.
 
\end_layout

\begin_layout Standard
[...]
\end_layout

\begin_layout Standard
W celu przyspieszenia tworzenia systemów rozproszonych zaproponowano wprowadzeni
e abstrakcji realizujących komunikację sieciową bez udziału programisty.
\end_layout

\begin_layout Subsection
DSM
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:background-DSM"

\end_inset

Model rozproszonej pamięci współdzielonej (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
distributed shared memory
\end_layout

\end_inset

, DSM) 
\begin_inset CommandInset citation
LatexCommand cite
key "DSM"

\end_inset

 implementowany jest na poziomie systemu operacyjnego.
 Zakłada on udostępnienie wspólnej przestrzeni adresowej dla wszystkich
 komputerów biorących udział w przetwarzaniu.
 Aplikacje odwołują się do pamięci w tradycyjny sposób.
 W przypadku wystąpienia błędu braku strony, system operacyjny zajmuje się
 sprowadzeniem jej do lokalnej pamięci.
 Mechanizm DSM nie jest obecnie wykorzystywany przy konstruowaniu systemów
 rozproszonych.
\end_layout

\begin_layout Subsection
RPC
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "def:background-RPC"

\end_inset

Zdalne wywoływanie procedur (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
remote procedure call
\end_layout

\end_inset

, RPC) 
\begin_inset CommandInset citation
LatexCommand cite
key "RPC"

\end_inset

 jest realizowane na poziomie języka programowania.
 Jego celem jest sprawić, by wywołanie metody na zdalnym komputerze było
 dla programisty tak proste, jak wywołanie lokalnej metody.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Przetwarzanie rozproszone rządzi się swoimi prawami, opisać problemy i odnieść
 się z 3.6.1[współdzielone struktury danych i obiekty]
\end_layout

\begin_layout Plain Layout
logowanie jest /tricky/ ale my to zrobiliśmy!
\end_layout

\begin_layout Itemize
awarie
\end_layout

\begin_layout Itemize
komunikacja, 
\end_layout

\begin_deeper
\begin_layout Itemize
stracone pakiety
\end_layout

\begin_layout Itemize
wydajność (minimalizowanie liczby komunikatów, minimalizowanie opóźnienia,
 maksymalizacja przepustowości),
\end_layout

\begin_layout Itemize
sumy kontrolne, potwierdzenia odbioru
\end_layout

\begin_deeper
\begin_layout Itemize
problem zgubionego potwierdzenia -- chcemy zapewnić, że wiadomość zostanie
 dostarczona dokładnie raz
\end_layout

\begin_layout Itemize
wykorzystywane w praktyce protokoły (np.
 TCP) starają się rozwiązać jeszcze wiele innych problemów, jak np.
 zatory w sieci, zaległe żądania i wiele innych.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
bezpieczeństwo -- poufność, integralność (komunikat nie został zmieniony),
 autentyczność (nadawca jest tym, za kogo się podaje).
\end_layout

\begin_layout Itemize
wprowadzanie abstrakcji komunikacyjnych
\end_layout

\begin_deeper
\begin_layout Itemize
DSM (distributed shared memory) [[LH89] “Memory Coherence in Shared Virtual
 Memory Systems” Kai Li and Paul Hudak ACM TOCS, 7:4, November 1989 The
 introduction of software-based shared memory via virtual memory.
 An intriguing idea for sure, but not a lasting or good one in the end.]
\end_layout

\begin_deeper
\begin_layout Itemize
mechanizm implementowany na poziomie systemu operacyjnego
\end_layout

\begin_layout Itemize
wspólna przestrzeń adresowa dla wszystkich komputerów
\end_layout

\begin_layout Itemize
w przypadku wystąpienia błędu braku strony w pamięci lokalnej, strona musi
 zostać sprowadzona
\end_layout

\begin_layout Itemize
mechanizm DSM nie jest obecnie wykorzystywany przy tworzeniu systemów rozproszon
ych
\end_layout

\end_deeper
\begin_layout Itemize
RPC (remote procedure call) [[BN84] “Implementing Remote Procedure Calls”
 Andrew D.
 Birrell, Bruce Jay Nelson ACM TOCS, Volume 2:1, February 1984 The foundational
 RPC system upon which all others build.
 Yes, another pioneering effort from our friends at Xerox PARC.]
\end_layout

\begin_deeper
\begin_layout Itemize
mechanizm implementowany na poziomie języka programowania
\end_layout

\begin_layout Itemize
cel: sprawić, by wywołanie metody na zdalnym komputerze było tak proste,
 jak wywołanie jej lokalnie; wysyłane jest zlecenie, a po zakończeniu wykonania
 wynik wraca do wywołującego
\end_layout

\begin_layout Itemize
serwer definiuje metody, które chce udostępnić, reszta jest ukryta w abstrakcji
 RPC
\end_layout

\begin_deeper
\begin_layout Itemize
stub generator (protocol compiler)
\end_layout

\begin_deeper
\begin_layout Itemize
- automatyzacja generowania wiadomości, kodowanie/dekodowanie parametrów
 wywołania oraz wyniku wykonania,
\end_layout

\begin_layout Itemize
- client stub
\end_layout

\begin_deeper
\begin_layout Itemize
a) utworzenie bufora na wiadomość (np.
 pustej tablicy bajtów o określonym rozmiarze),
\end_layout

\begin_layout Itemize
b) zapis informacji do bufora wiadomości (zarówno jakiegoś rodzaju wskaźnika/uch
wytu do metody jak i parametrów wywołania); proces ten jest nazywany serializacj
ą lub rzadziej przetaczaniem (ang.
 serialization, mashalling),
\end_layout

\begin_layout Itemize
c) wysłanie wiadomości do serwera RPC, przy czym sam proces komunikacji
 jest obsługiwany przez RPC run-time library opisaną poniżej,
\end_layout

\begin_layout Itemize
d) w przypadku synchronicznego wywołanai metody -- oczekiwanie na jej zakończeni
e,
\end_layout

\begin_layout Itemize
e) dekodowanie otrzymanego wyniku; preces ten jest nazywany deserializacją
 (ang.
 deserialization, unmarshalling),
\end_layout

\begin_layout Itemize
f) powrót sterowania do metody wywołującej stub,
\end_layout

\end_deeper
\begin_layout Itemize
- server stub
\end_layout

\begin_deeper
\begin_layout Itemize
a) rozpakowanie/deserializacja otrzymanej wiadomości,
\end_layout

\begin_layout Itemize
b) właściwe wywołanie wskazanej metody z przekazanymi parametrami,
\end_layout

\begin_layout Itemize
c) przygotowanie wiadomości z wynikiem,
\end_layout

\begin_layout Itemize
d) wysłanie odpowiedzi do wywołującego,
\end_layout

\end_deeper
\begin_layout Itemize
- pojawiają się tutaj problemy, np.
 serializacja złożonych struktur danych, współbieżność serwera (thread pool),
 
\end_layout

\end_deeper
\begin_layout Itemize
run-time library
\end_layout

\begin_deeper
\begin_layout Itemize
- rozwiązuje problemy związane z wydajnością i niezawodnością
\end_layout

\begin_layout Itemize
- odnajdywanie serwera RPC (nazwy, DNS, IP),
\end_layout

\begin_layout Itemize
- wybór protokołu transportowego (niezawodny TCP czy zawodny UDP? w drugim
 przypadku musimy tutaj zadbać o potwierdzenia, aby zrealizować semantykę
 dokładnie raz/co najwyżej raz)
\end_layout

\end_deeper
\end_deeper
\end_deeper
\end_deeper
\end_inset


\end_layout

\begin_layout Section
Istniejące rozwiązania
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:background-Istniejące-rozwiązania"

\end_inset

Poniżej przedstawiono wybrane środowiska umożliwiające tworzenie aplikacji
 do rozproszonych obliczeń.
 W tabeli 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:background-Podsumowanie-istniejacych-rozwiazan"

\end_inset

 znajduje się ich porównanie.
\end_layout

\begin_layout Subsection
PVM
\end_layout

\begin_layout Standard
PVM (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Parallel Virtual Machine
\end_layout

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "PVM"

\end_inset

 powstał w 1989 r.
 w Oak Ridge National Laboratory, a jego dalszy rozwój odbywał się na University
 of Tennessee.
 W 1993 r.
 została wydana wersja 3.0.
 Jest to zintegrowany zestaw bibliotek i narzędzi, które służą do projektowania
 aplikacji rozproszonych działąjących w środowisku połączonych siecią komputerów
 heterogenicznych.
 Główne założenia systemu obejmowały:
\end_layout

\begin_layout Itemize
używanie puli maszyn określonej przez użytkownika do realizacji przetwarzania
 oraz możliwość dodawania i usuwania komputerów podczas pracy,
\end_layout

\begin_layout Itemize
brak pełnego abstrahowania od typów maszyn, tj.
 aplikacje, które wykorzystywały specyficzne własności określonych maszyn
 mogły zostać im przypisane,
\end_layout

\begin_layout Itemize
model przetwarzania oparty o zadania, które można utożsamiać z procesami
 w systemie Unix oraz jawne przesyłanie komunikatów pomiędzy zadaniami,
\end_layout

\begin_layout Itemize
wsparcie dla heterogenicznych środowisk -- różnych typów komputerów, sieci
 i aplikacji, a także obsługa sytuacji, w których różne maszyny korzystają
 z różnych reprezentacji danych.
\end_layout

\begin_layout Subsection
MPI
\end_layout

\begin_layout Standard
Biblioteka MPI (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Message Passing Interface
\end_layout

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "Using-MPI-Portable-Parallel-Programming-with-the-Message-Passing-Interface"

\end_inset

 została zaproponowana jako próba połączenia najlepszych rozwiązań z istniejącyc
h ówcześnie i rozwijanych od lat systemów opartych na przesyłaniu wiadomości
 (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
message-passing systems
\end_layout

\end_inset

).
 Standard określa nazwy, sposoby i wyniki wywołania podprogramów realizowane
 z aplikacji napisanych m.
\begin_inset space ~
\end_inset

in.
 w języku C.
 Aplikacja taka jest kompilowana za pomocą standardowego kompilatora i łączona
 (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
linked
\end_layout

\end_inset

) z biblioteką MPI.
\begin_inset Note Note
status open

\begin_layout Plain Layout
rozbudować opis MPI
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Dryad i DryadLINQ
\end_layout

\begin_layout Standard
System Dryad 
\begin_inset CommandInset citation
LatexCommand cite
key "Microsoft-Research-Dryad"

\end_inset

 został stworzony przez zespół naukowców z Microsoft Research.
 Jego celem było zapewnienie niezawodnego środowiska do obliczeń rozproszonych
 na dużych zbiorach danych.
 System ten miał pozwalać programiście pisać programy wykonywane w klastrze
 bez posiadania umiejętności programowania równoległego bądź rozproszonego.
\end_layout

\begin_layout Standard
Przetwarzanie było modelowane jako skierowany graf acykliczny, w którym
 wierzchołki reprezentowały sekwencyjne programy, a krawędzie przepływ danych
 jednokierunkowymi kanałami.
 System Dryad na podstawie tak zamodelowanego przetwarzania tworzył graf
 przetwarzania, wykonywał go i w razie potrzeby modyfikował.
\end_layout

\begin_layout Standard
Programy w wierzchołkach były zapisywane przy pomocy języka Scope (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Structured Computations Optimized for Parallel Execution
\end_layout

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "SCOPE"

\end_inset

.
 Język ten posiadał składnię podobną do języka SQL (and.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Structured Query Language
\end_layout

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "SQL"

\end_inset

.
\end_layout

\begin_layout Standard
W celu uproszczenia przetwarzania na bazie systemu Dryad powstało środowisko
 DryadLINQ 
\begin_inset CommandInset citation
LatexCommand cite
key "DryadLINQ-MSR"

\end_inset

.
 Środowisko to dostarczało implementację LINQ (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Language Integrated Query
\end_layout

\end_inset

), która wykorzystywała środowisko Dryad do rozproszonego przetwarzania
 kolekcji.
 Jednym z ograniczeń wprowadzonych przez DryadLINQ w stosunku do LINQ było
 założenie, że funkcje przetwarzające obiekty kolekcji nie będą modyfikowały
 zmiennych zdefiniowanych poza nimi - w przypadku wykonania takiej operacji
 twórcy nie definiowali zachowania systemu.
\end_layout

\begin_layout Standard
W roku 2011 Microsoft zaprzestał rozwijania Dryad w ramach 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
High Performance Comupting Pack
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "DryadLINQ-discarded"

\end_inset

, skupiając się na dostosowaniu Apache Hadoop do pracy pod kontrolą Windows
 Server i Windows Azure.
\end_layout

\begin_layout Subsection
Hadoop
\end_layout

\begin_layout Standard
Przetwarzanie w modelu mapowania i redukcji -- MapReduce 
\begin_inset CommandInset citation
LatexCommand cite
key "Google-MapReduce"

\end_inset

 -- zostało pierwotnie zaproponowane przez firmę Google.
 Hadoop to jego implementacja wydana na otwartej licencji.
 Środowisko korzysta z 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Hadoop Distributed File System
\end_layout

\end_inset

 (HDFS) 
\begin_inset CommandInset citation
LatexCommand cite
key "HDFS-Architecture-Guide"

\end_inset

 -- rozproszonego systemu plików o wysokiej odporności na awarie węzłów.
 Udostępnia on dane w sposób strumieniowy oraz jest dostosowany do obsługi
 dużych zbiorów danych (tj.
 rozmiaru mierzonego w terabajtach) i dużych plików.
 Twórcy środowiska wyszli z założenia, że ,,zmiana miejsca obliczeń jest
 mniej kosztowna niż przesłanie danych'', w związku z tym HDFS udostępnia
 aplikacjom interfejs, który pozwala zmienić miejsce wykonania tak, aby
 odbyło się tam, gdzie fizycznie znajdują się dane.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
2005 Doug Cutting, Mike Cafarella (http://web.eecs.umich.edu/~michjc/bio.html)
\end_layout

\begin_layout Plain Layout
originally developed to support distribution for the Nutch search engine
 project (http://hadoop.apache.org/core/)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Spark
\end_layout

\begin_layout Standard
Środowisko obliczeniowe Spark 
\begin_inset CommandInset citation
LatexCommand cite
key "Spark-Berkeley"

\end_inset

 powstało w wyniku prac prowadzonych na University of California w Berkeley.
 Od 2013 r.
 jako Apache Spark jest rozwijane przez Apache Software Foundation.
 Środowisko to może być użyte do przetwarzania w modelu nieograniczonym
 do dwóch faz jak w MapReduce, co upodabnia je bardziej do Dryad.
 Zastosowane w środowisku optymalizacje pozwoliły znacząco poprawić czas
 opóźnienia rozpoczęcia przetwarzania zadania w klastrze składającym się
 z tysięcy rdzeni 
\begin_inset CommandInset citation
LatexCommand cite
key "Spark-Berkeley-Performance"

\end_inset

.
 
\end_layout

\begin_layout Standard
Warto zwrócić w tym miejscu uwagę na ciekawą abstrakcję pamięci udostępnianą
 przez środowisko Spark nazywaną 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Resilient Distributed Dataset
\end_layout

\end_inset

 (RDD) zapewniającą odtwarzanie danych utraconych w wyniku awarii.
 RDD może zostać skonstruowany na podstawie pliku znajdującego się we współdziel
onym systemie plików jak np.
 HDFS, poprzez ,,zrównoleglenie'' kolekcji, np.
 tablicy lub w wyniku manipulacji istniejącym już RDD -- transformacji za
 pomocą operacji mapowania i konkatenacji
\begin_inset Foot
status open

\begin_layout Plain Layout
Operacja mapowania i konkatenacji w Spark -- 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
flatMap
\end_layout

\end_inset

, aplikuje na elementach funkcję 
\begin_inset Formula $A$
\end_inset


\begin_inset Formula $\Rightarrow$
\end_inset


\begin_inset Formula $List[B]$
\end_inset

 i zwraca jedną listę będącą połączeniem wszystkich pośrednich.
 Jej semantyka jest więc tożsama z semantyką operacji 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
map
\end_layout

\end_inset

 w modelu MapReduce.
\end_layout

\end_inset

, mapowania
\begin_inset Foot
status open

\begin_layout Plain Layout
Operacja mapowania w Spark -- 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
map
\end_layout

\end_inset

, aplikuje na elementach funkcję 
\begin_inset Formula $A$
\end_inset


\begin_inset Formula $\Rightarrow$
\end_inset


\begin_inset Formula $B$
\end_inset

 i zwraca nową listę.
\end_layout

\end_inset

 czy filtrowania
\begin_inset Foot
status open

\begin_layout Plain Layout
Operacja filtrowania w Spark -- 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
filter
\end_layout

\end_inset

, zwraca listę elementów spełniających podany predykat.
\end_layout

\end_inset

.
 Czwartym sposobem konstrukcji nowego RDD jest zmiana trwałości (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
persistence
\end_layout

\end_inset

) już istniejącego za pomocą akcji 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cache
\end_layout

\end_inset

 -- wskazuje, że zbiór danych powinien zostać w pamięci operacyjnej ponieważ
 będzie jeszcze używany -- lub 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
save
\end_layout

\end_inset

, która materializuje zbiór danych do HDFS.
 
\end_layout

\begin_layout Subsection
Erlang
\end_layout

\begin_layout Standard
Język programowania Erlang 
\begin_inset CommandInset citation
LatexCommand cite
key "Erlang-Armstrong:2010:ERL:1810891.1810910"

\end_inset

 został zaprojektowany do tworzenia odpornych na awarie systemów rozproszonych.
 Jego historia sięga roku 1985, kiedy to w firmie Ericsson postanowiono
 ,,zrobić coś ze sposobem, w jaki tworzą aplikacje''.
 W roku 2000 Erlang został upubliczniony na otwartej licencji.
 Podstawowe jego cechy to:
\end_layout

\begin_layout Itemize
izolacja procesów, brak współdzielonych struktur danych w pamięci operacyjnej,
 zamków, semaforów,
\end_layout

\begin_layout Itemize
procesy komunikują się przesyłając asynchroniczne wiadomości, które zawierają
 faktyczne dane, a nie referencje na zdalne obiekty,
\end_layout

\begin_layout Itemize
zdolność do wykrycia awarii i replikacja -- procesy otrzymują sygnały w
 przypadku awarii obserwowanych procesów i muszą posiadać tyle danych, by
 przejąć zadania straconego węzła i kontynuować przetwarzanie,
\end_layout

\begin_layout Itemize
system udostępnia metodę określania przyczyn awarii procesu.
\end_layout

\begin_layout Standard
Z uwagi na mały narzut pamięciowy procesów (nazywanych także 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
aktorami
\end_layout

\end_inset

) programista może tworzyć ich bardzo wiele.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Może: Procesy nazywane są też aktorami ze względu na podobieństwa do modelu
 zaproponowanego przez Gula Aghe w artykule [G.
 Agha.
 A model of concurrent computation in distributed systems.
 W MIT Series in Artificial Intelligence.
 MIT Press, Cambridge, MA, USA, 1986.] -- por.
 z kolejną notatką :D
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Project Orleans
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Opis co to jest + Kiedy ogłoszony
\end_layout

\end_inset


\end_layout

\begin_layout Standard
W modelu programowania Orleans 
\begin_inset CommandInset citation
LatexCommand cite
key "Orleans-export:210931"

\end_inset

 zaproponowano wprowadzenie abstrakcji 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
wirtualnych aktorów
\end_layout

\end_inset

.
 W porównaniu do języka Erlang, środowisko wykonwacze działa tu na wyższym
 poziomie abstrakcji, uwalniając programistę od problemów takich jak obsługa
 awarii, odtwarzanie aktorów i zarządzanie rozproszonymi zasobami -- w szczególn
ości rozłożeniem aktorów na poszczególne węzły.
 W systemie Orleans przyjęto następujące założenia:
\end_layout

\begin_layout Itemize
aktorzy istnieją permanentnie (wirtualnie), programista nie tworzy ani nie
 niszczy samodzielnie reprezentujących ich obiektów,
\end_layout

\begin_layout Itemize
instancje aktorów (tzw.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
aktywacje
\end_layout

\end_inset

) są tworzone automatycznie w momencie wysłania żądania do aktora, który
 nie istnieje lub gdy aktor jest typu 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
stateless worker
\end_layout

\end_inset

, tj.
 nie wymagamy, aby istaniała tylko jedna instancja aktora danego typu (w
 przeciwieństwie do 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
single activation
\end_layout

\end_inset

),
\end_layout

\begin_layout Itemize
przezroczystość położenia -- instancja aktora może istnieć na różnych maszynach
 w różnych chwilach, może też nie istnieć w ogóle fizycznie, aplikacja nie
 zna lokalizacji aktora,
\end_layout

\begin_layout Itemize
automatyczne skalowanie -- niezależne instancje aktorów typu 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
stateless worker
\end_layout

\end_inset

 mogą być uruchamiane w wielu egzemplarzach.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The actor model is a long-standing model for concurrent computation, dating
 back to 1973 and invented by Carl Hewitt 
\end_layout

\begin_layout Plain Layout
(http://channel9.msdn.com/Shows/Going+Deep/Hewitt-Meijer-and-Szyperski-The-Actor-M
odel-everything-you-wanted-to-know-but-were-afraid-to-ask)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Podsumowanie
\begin_inset Note Note
status open

\begin_layout Plain Layout
do poprawy
\end_layout

\end_inset


\end_layout

\begin_layout Standard
[...] Z jednej strony język jest tylko narzędziem i dla programisty, który
 poznał ich kilka, rozpoznanie kolejnego i napisanie w nim aplikacji zazwyczaj
 nie stanowi problemu.
 Z drugiej strony każdy ma język, podczas pisania w którym czuje się komfortowo,
 wie jakich problemów może się spodziewać i jak je rozwiązać.
 Mając świadomość, że język może być jednak istotnym czynnikiem przy wyborze
 środowiska dla aplikacji rozproszonej, został on ujęty w tabeli 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:background-Podsumowanie-istniejacych-rozwiazan"

\end_inset

 podsumowującej rozdział.
\begin_inset Note Note
status open

\begin_layout Plain Layout
warto trzymać się rozwiązań, które są rozwijane
\end_layout

\begin_layout Plain Layout
trzymanie się obszarów określonego języka
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:background-Podsumowanie-istniejacych-rozwiazan"

\end_inset

Porównanie wybranych środowisk przetwarzania rozproszonego
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features rotate="90" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Środowisko
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Język programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Model programowania
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pierwsze
\begin_inset script superscript

\begin_layout Plain Layout
a
\end_layout

\end_inset

/najnowsze
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wydanie
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PVM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C/C++/Fortran
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
przesyłanie komunikatów
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1989 / 2009
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MPI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C/C++/Fortran
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
przesyłanie komunikatów
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1994 / 2014
\begin_inset script superscript

\begin_layout Plain Layout
b
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dryad
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SCOPE / .NET (DryadLINQ)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
przepływ danych w DAG
\begin_inset Note Note
status open

\begin_layout Plain Layout
??
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2009 / 2011
\begin_inset Note Note
status open

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hadoop
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java/Scala
\begin_inset Note Note
status open

\begin_layout Plain Layout
/Python?/C++?(1)
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mapowanie i reducja
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2009
\begin_inset Note Note
status open

\begin_layout Plain Layout
Yahoo!
\end_layout

\end_inset

 / 2014
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spark
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java/Scala/Python
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
niesprecyzowany
\begin_inset Note Note
status open

\begin_layout Plain Layout
??
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2014
\begin_inset Note Note
status open

\begin_layout Plain Layout
??
\end_layout

\end_inset

 / 2014
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erlang
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erlang
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
przesyłanie komunikatów
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2000 / 2014
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Orleans
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.NET (C#/F#/VB)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
przesyłanie komunikatów
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2014 / 2014
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset script superscript

\begin_layout Plain Layout
a
\end_layout

\end_inset

Pierwsze publiczne stabilne wydanie
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset script superscript

\begin_layout Plain Layout
b
\end_layout

\end_inset

Implementacja Open MPI
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
(1) http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-p
ython/
\end_layout

\begin_layout Plain Layout
(2) http://research.microsoft.com/en-us/downloads/03960cab-bb92-4c5c-be23-ce51aee0
792c/
\end_layout

\end_inset


\end_layout

\begin_layout Section
Definicje
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Nazewnictwo
\end_layout

\begin_layout Standard
...
\begin_inset Note Note
status open

\begin_layout Plain Layout
Napisać, że używamy dalej słowa rozproszony, że współdzielony i wyjaśnić
 jak to rozumiemy
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Biblioteka Bluepath
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Biblioteka Bluepath (w skrócie: 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
biblioteka
\end_layout

\end_inset

) jest przedmiotem niniejszej pracy.
 To zestaw klas, które wspomagają twórców aplikacji rozproszonych.
 
\end_layout

\begin_layout Standard
Zbudowane za jego pomocą
\begin_inset Note Note
status open

\begin_layout Plain Layout
??
\end_layout

\end_inset

 klastry określane są mianem 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
systemu
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Użytkownik
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:podstawy-teorytyczne-uzytkownik"

\end_inset

Mianem użytkownika określany jest programista korzystający z funkcji udostępnian
ych przez bibliotekę Bluepath podczas tworzenia aplikacji.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Kod użytkownika
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Pod pojęciem kodu użytkownika rozumiany jest kod źródłowy pochodzący spoza
 biblioteki Bluepath -- będący częścią aplikacji, która ją wykorzystuje.
 
\end_layout

\begin_layout Standard
Termin ten odnosi się najczęściej do fragmentów kodu, które są wykonywane
 w ramach rozproszonego wątku (def.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:background-Rozproszony-watek"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Terminy technologiczne
\end_layout

\begin_layout Standard
W pracy pojawia się szereg terminów technologicznych -- głównie akronimów
 -- które, w celu uniknięcia nieporozumień, zdefiniowano poniżej.
\end_layout

\begin_layout Subsubsection
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
XML
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "def:background-XML"

\end_inset

(ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Extensible Markup Language
\end_layout

\end_inset

)...
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
WCF
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "def:background-WCF"

\end_inset

Windows Communication Foundation 
\begin_inset CommandInset citation
LatexCommand cite
key "MSDN:WhatIsWindowsCommunicationFoundation"

\end_inset

...
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
XSD
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "def:background-XSD"

\end_inset

(ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
XML Schema Definition
\end_layout

\end_inset

)...
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Zapora ogniowa
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "def:background-Firewall"

\end_inset

(ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
firewall
\end_layout

\end_inset

)...
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\end_body
\end_document
