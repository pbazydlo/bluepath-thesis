#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Podstawy teorytyczne
\end_layout

\begin_layout Standard
tu jakiś wstęp do całego rozdziału - co w nim będzie i po co...
\end_layout

\begin_layout Section
Definicje
\end_layout

\begin_layout Standard
Węzeł
\end_layout

\begin_layout Subsection
Nazewnictwo
\end_layout

\begin_layout Standard
Biblioteka 
\end_layout

\begin_layout Standard
Bluepath to my a my to Bluepath.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Istniejące rozwiązania
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:background-Istniejące-rozwiązania"

\end_inset

Przed stworzeniem środowiska ułatwiającego tworzenie aplikacji rozproszonych
 należy przeanalizować to co już istnieje.
\end_layout

\begin_layout Subsection
PVM
\end_layout

\begin_layout Standard
jawny message passing, trudne do debugowania, brak możliwości dołączania
 węzłów w trakcie przetwarzania.
\end_layout

\begin_layout Subsection
MPI
\end_layout

\begin_layout Standard
podobnie jak PVM
\end_layout

\begin_layout Subsection
Hadoop
\end_layout

\begin_layout Standard
Hadoop to wydane na wolnej licencji środowisko przetwarzania w modelu mapowania
 i redukcji zaprojektowanymn pierwotnie przez firmę Google -- MapReduce
 
\begin_inset CommandInset citation
LatexCommand cite
key "Google-MapReduce"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
opis hadoopa i na koniec:
\end_layout

\end_inset

Proponowane w niniejszej pracy środowisko przetwarzania rozproszonego ma
 szerszą klasę zastosowań, możliwe jest także zaimplementowanie na jego
 bazie obliczeń w modelu mapowania i redukcji, co zostało zaprezentowane
 w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:applications-MapReduce"

\end_inset

.
\end_layout

\begin_layout Subsection
Spark
\end_layout

\begin_layout Standard
uyfiyg
\end_layout

\begin_layout Subsection
DryadLINQ
\end_layout

\begin_layout Standard
Środowisko DryadLINQ 
\begin_inset CommandInset citation
LatexCommand cite
key "DryadLINQ-MSR"

\end_inset

 jest specjalizowane do przetwarzania kolekcji.
 Wymaga Dryad - ciężki do postawienia i skonfigurowania
\begin_inset Note Note
status open

\begin_layout Plain Layout
 [przydało by się jakieś wsparcie dla tego stwierdzenia]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Erlang
\end_layout

\begin_layout Standard
Język programowania Erlang 
\begin_inset CommandInset citation
LatexCommand cite
key "Erlang-Armstrong:2010:ERL:1810891.1810910"

\end_inset

 został zaprojektowany do tworzenia odpornych na awarie systemów rozproszonych.
 Jego historia sięga roku 1985, kiedy to w firmie Ericsson postanowiono
 ,,zrobić coś ze sposobem, w jaki tworzą aplikacje''.
 W roku 2000 Erlang został upubliczniony na otwartej licencji.
 Podstawowe jego cechy to:
\end_layout

\begin_layout Itemize
izolacja procesów, brak współdzielonych struktur danych w pamięci operacyjnej,
 zamków, semaforów,
\end_layout

\begin_layout Itemize
procesy komunikują się przesyłając asynchroniczne wiadomości, które zawierają
 faktyczne dane, a nie referencje na zdalne obiekty,
\end_layout

\begin_layout Itemize
zdolność do wykrycia awarii i replikacja -- procesy otrzymują sygnały w
 przypadku awarii obserwowanych procesów i muszą posiadać tyle danych, by
 przejąć zadania straconego węzła i kontynuować przetwarzanie,
\end_layout

\begin_layout Itemize
system udostępnia metodę określania przyczyn awarii procesu.
\end_layout

\begin_layout Standard
Z uwagi na mały narzut pamięciowy procesów (nazywanych także 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
aktorami
\end_layout

\end_inset

) programista może tworzyć bardzo wiele.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Może: Procesy nazywane są też aktorami ze względu na podobieństwa do modelu
 zaproponowanego przez Gula Aghe w artykule [G.
 Agha.
 A model of concurrent computation in distributed systems.
 W MIT Series in Artificial Intelligence.
 MIT Press, Cambridge, MA, USA, 1986.]
\end_layout

\begin_layout Plain Layout
Lekkie wątki, akcje na odebrane wiadomości(przetwarzanie message-centric),
 nie ma współdzielonego stanu pomiędzy wątkami.
\end_layout

\begin_layout Plain Layout
Wolimy znany model zamków i innych mutexów.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Project Orleans
\end_layout

\begin_layout Standard
W modelu programowania Orleans 
\begin_inset CommandInset citation
LatexCommand cite
key "Orleans-export:210931"

\end_inset

 zaproponowano wprowadzenie abstrakcji wirtualnych aktorów.
 W porównaniu do Erlanga, środowisko wykonwacze działa tu na wyższym poziomie
 abstrakcji, uwalniając programistę od problemów takich jak obsługa awarii,
 odtwarzanie aktorów i zarządzanie rozproszonymi zasobami -- w szczególności
 rozłożeniem aktorów na poszczególne węzły.
 W systemie Orleans przyjęto następujące założenia:
\end_layout

\begin_layout Itemize
aktorzy istnieją permanentnie (wirtualnie),
\end_layout

\begin_layout Itemize
instancje aktorów (tzw.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
aktywacje
\end_layout

\end_inset

) są tworzone automatycznie w momencie wysłania żądania do aktora, który
 nie istnieje lub gdy aktor jest typu 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
stateless worker
\end_layout

\end_inset

, tj.
 nie wymagamy, aby istaniała tylko jedna instancja aktora danego typu (
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
single activation
\end_layout

\end_inset

),
\end_layout

\begin_layout Itemize
przezroczystość położenia -- instancja aktora może istnieć na różnych maszynach
 w różnych chwilach, może też nie istnieć w ogóle fizycznie, aplikacja nie
 zna lokalizacji aktora,
\end_layout

\begin_layout Itemize
automatyczne skalowanie -- niezależne instancje aktorów typu 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
stateless worker
\end_layout

\end_inset

 mogą być uruchamiane w wielu egzemplarzach.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
http://research.microsoft.com/en-us/projects/orleans/
\end_layout

\begin_layout Plain Layout
Orleans-MSR-TR-2014-41.pdf -- http://research.microsoft.com/apps/pubs/default.aspx?i
d=210931
\end_layout

\begin_layout Plain Layout
http://blogs.msdn.com/b/dotnet/archive/2014/04/02/available-now-preview-of-project
-orleans-cloud-services-at-scale.aspx
\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout
The actor model is a long-standing model for concurrent computation, dating
 back to 1973 and invented by Carl Hewitt 
\end_layout

\begin_layout Plain Layout
(http://channel9.msdn.com/Shows/Going+Deep/Hewitt-Meijer-and-Szyperski-The-Actor-M
odel-everything-you-wanted-to-know-but-were-afraid-to-ask)
\end_layout

\end_inset


\end_layout

\end_body
\end_document
