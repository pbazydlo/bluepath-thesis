#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_modules
dcs
theorems-ams-bytype
theorems-sec-bytype
theorems-ams-extended-bytype
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Koncepcja i projekt systemu
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap:concept"

\end_inset

Proponowany model programowania miał być jak najbardziej naturalny dla programis
tów zaznajomionych z zagadnieniami programowania równoległego i korzystać
 z koncepcji wątków, pamięci rozproszonej oraz zamków.
 Wprowadzone abstrakcje wysokiego poziomu miały na celu ukrycie przed użytkownik
iem leżącego u podstaw programowania rozproszonego mechnizmu przesyłania
 komunikatów.
 
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status collapsed

\begin_layout Plain Layout
Węzeł obliczeniowy
\end_layout

\end_inset

 
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:background-Wezel-obliczeniowy"

\end_inset

Mianem węzła obliczeniowego (w skrócie: 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
węzła
\end_layout

\end_inset

) określamy komputer, na którym działa usługa zaimplementowana z użyciem
 biblioteki Bluepath, której celem jest zlecanie bądź wykonanie zleconych
 zadań.
\end_layout

\begin_layout Standard
Klaster systemu Bluepath składa się z węzłów obliczeniowych połączonych
 siecią.
 Rysunek 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:background-schemat-systemu"

\end_inset

 przedstawia schemat architektury systemu.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status collapsed

\begin_layout Plain Layout
Klaster
\end_layout

\end_inset

 
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:background-Klaster"

\end_inset

Klaster to zbiór węzłów obliczeniowych, które są zarejestrowane we wspólnej
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usłudze odnajdywania węzłów
\end_layout

\end_inset

 (def.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:background-Usluga-odnajdywania-wezlow"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template RasterImage
	filename images/schemat-systemu.png
	lyxscale 10
	scale 85

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:background-schemat-systemu"

\end_inset

Schemat architektury systemu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Komunikacja
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:concept-Komunikacja"

\end_inset

Każdy z węzłów w klastrze może komunikować
\begin_inset space \space{}
\end_inset

się poprzez sieć z każdym innym.
 Przyjęto następujące założenia co do protokołów komunikacyjnych:
\end_layout

\begin_layout Enumerate
protokół zastosowany w warstwie transportowej powinien zapewnić niezawodne
 dostarczenie wszystkich wiadomości,
\end_layout

\begin_layout Enumerate
protokół działający w warstwie aplikacji powinien oczekiwać odpowiedzi na
 wysyłane żądania.
 
\end_layout

\begin_layout Standard
Nie jest wymagane zachowanie kolejności dostarczania wiadomości -- w szczególnoś
ci z uwagi na to, że w kanale znajduje się w danym momencie co najwyżej
 jedna wiadomość.
 Dla uzyskania transparentności procesu rozpraszania obliczeń sam proces
 przesyłania komunikatów pomiędzy węzłami jest ukryty przed użytkownikiem.
\end_layout

\begin_layout Standard
Zakładamy również, że bezpieczeństwo klastra opiera się na tym, iż działa
 on w
\begin_inset space ~
\end_inset

odseparowanej sieci, tj.
 bez bezpośredniego dostępu z sieci publicznej (internetu).
 W związku z tym zastosowane protokoły komunikacyjne nie muszą zapewniać
 mechanizmów uwierzytelniania i autoryzacji.
\end_layout

\begin_layout Section
Usługa odnajdywania węzłów
\end_layout

\begin_layout Standard
Jednym z podstawowych założeń jest posiadanie przez wszystkie węzły w systemie
 lokalnej wiedzy o wszystkich innych węzłach obecnych w klastrze.
 Informacje dotyczące stanu poszczególnych węzłów są dostarczane przez 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługę odnajdywania węzłów
\end_layout

\end_inset

.
 Usługa ta powinna obsługiwać sytuację rejestracji oraz wyrejestrowania
 się węzłów.
 System z założenia abstrahuje od sposobu realizacji tej usługi (czy będzie
 to system scentralizowany, czy rozproszony np.
 oparty na algorytmie plotkującym).
 W związku z pełnioną rolą, 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługa odnajdywania węzłów
\end_layout

\end_inset

 jest kluczowym elementem przy implementacji wykrywania awarii węzłów w
 klastrze.
 Nowe węzły muszą zarejstrować się w usłudze.
 Po rejestracji są one monitorowane dopóki nie opuszczą klastra i wyrejestrują
 się lub ulegną awarii.
 Niedostępne węzły -- tzn.
 takie, które nie odpowiedziały na zapytanie w określonym czasie -- są usuwane
 z klastra.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status collapsed

\begin_layout Plain Layout
Usługa odnajdywania węzłów
\end_layout

\end_inset

 
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:background-Usluga-odnajdywania-wezlow"

\end_inset

Usługa odnajdywania węzłów to system umożliwiający węzłom odnajdywanie się
 wzajemnie w sieci i łączenie w klaster obliczeniowy.
\end_layout

\begin_layout Subsection
Zarządca połączeń
\end_layout

\begin_layout Standard
Każdy węzeł powinien przechowywać lokalnie obraz klastra, aby w momencie,
 kiedy zajdzie potrzeba zlecenia zadania jednemu ze 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zdalnych wykonawców
\end_layout

\end_inset

 nie musiał odpytywać 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługi odnajdywania węzłów
\end_layout

\end_inset

.
 Tym zadaniem zajmuje się 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zarządca połączeń
\end_layout

\end_inset

.
 Przechowuje on też dodatkowe informacje, które mogą zostać wykorzystane
 przez 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
planistę
\end_layout

\end_inset

, takie jak statystyki obciążenia węzłów.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Zarządca połączeń
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Zarządca połączeń to klient usługi odnajdywania węzłów, który odpowiada
 za rejestrowanie, wyrejestrowywanie i przechowywanie lokalnego obrazu stanu
 klastra na każdym z węzłów.
\end_layout

\begin_layout Section
Wątek rozproszony
\end_layout

\begin_layout Standard
Specyfika systemu Bluepath wymaga rozróżnienia wątku systemu operacyjnego
 oraz 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątku rozproszonego
\end_layout

\end_inset

 rozumianego jako jednostki przetwarzania w systemie.
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Wątek rozproszony
\end_layout

\end_inset

 jest tworzony na podstawie statycznej metody, która przyjmuje dowolną,
 liczbę parametrów i zwraca wartość.
 Wynik przechwytywany jest przez środowisko i udostępniany do odczytu na
 węźle, który zlecił wykonanie wątku.
 Rozproszony wątek może zostać wykonany na dowolnym węźle obliczeniowym
 oraz uruchamiać kolejne rozproszone wątki.
 Decyzja o wyborze miejsca wykonania wątku podejmowana jest z wykorzystaniem
 lokalnej wiedzy o stanie klastra przez 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
planistę
\end_layout

\end_inset

.
 Wątek rozproszony musi wykonać się w całości na jednym z węzłów -- nie
 ma możliwości wstrzymania przetwarzania, przeniesienia wątku razem z aktualnym
 stanem i
\begin_inset space ~
\end_inset

wznowienia obliczeń na innym węźle.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Wątek rozproszony
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:background-Rozproszony-watek"

\end_inset

Wątek rozproszony reprezentuje jednostkę przetwarzania w systemie.
 Opakowuje fragment kodu, który może być wykonany na dowolnym węźle obliczeniowy
m.
\end_layout

\begin_layout Subsection
Problem detekcji zakończenia
\end_layout

\begin_layout Standard
W punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:background-Problem-detekcji-zakonczenia"

\end_inset

 zasygnalizowano konieczność zaproponowania rozwiąznia problemu detekcji
 zakończenia.
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Wątki rozproszone
\end_layout

\end_inset

 tworzą drzewiastą strukturę przetwarzania -- można ją określić mianem modelu
 dyfuzyjnego.
 Wyróżniamy tutaj inicjatora przetwarzania w korzeniu logicznego drzewa
 oraz jego następniki -- procesy potomne, które ponadto mogą inicjować kolejne
 procesy.
 Użytkownik musi zapewnić, że proces-rodzic nie zakończy się, dopóki nie
 zakończą się jego procesy-dzieci korzystając z przeznaczonej do tego metody.
\end_layout

\begin_layout Section
Wykonawca
\end_layout

\begin_layout Standard
W celu ograniczenia liczby zadań pełnionych przez 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątek rozproszony
\end_layout

\end_inset

 zdefiniowano 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wykonawcę
\end_layout

\end_inset

 -- element odpowiedzialny za wykonywanie wątków.
 Zastosowanie takiej abstrakcji pozwala potraktować przetwarzanie lokalne
 oraz zdalne w podobny sposób.
 Specjalizacje -- 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
lokalny wykonawca
\end_layout

\end_inset

 i 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zdalny wykonawca
\end_layout

\end_inset

 -- wynikają z potrzeby realizacji innej logiki w przypadku wykonania kodu
 na lokalnej i zdalnej maszynie.
 
\end_layout

\begin_layout Subsection
Lokalny wykonawca
\end_layout

\begin_layout Standard
Wszystkie wątki wykonywane lokalnie (zarówno te które pochodzą z lokalnego
 węzła jak i te zlecone przez inny węzeł) są zarządzane przez 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
lokalnych wykonawców
\end_layout

\end_inset

.
 Do zadań 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
lokalnego wykonawcy
\end_layout

\end_inset

 należą:
\end_layout

\begin_layout Itemize
rozpoczęcie przetwarzania, 
\end_layout

\begin_layout Itemize
przekierowanie parametrów, 
\end_layout

\begin_layout Itemize
przechwycenie wyjątków,
\end_layout

\begin_layout Itemize
udostępnienie wyników wyższym warstwom po zakończeniu przetwarzania.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Lokalny wykonawca
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Lokalny wykonawca to obiekt, który odpowiada za faktyczne wykonanie otrzymanego
 zadania.
\end_layout

\begin_layout Subsection
Zdalny wykonawca
\end_layout

\begin_layout Standard
Reprezentacją zdalnego uruchomienia 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
wątku rozproszonego
\end_layout

\end_inset

 jest obiekt 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
zdalnego wykonawcy
\end_layout

\end_inset

.
 Zleca on wykonanie zadania węzłowi wybranemu przez 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
planistę
\end_layout

\end_inset

 oraz monitoruje stan wykonania zadania (zakończenie, wystąpienie błędów).
 Jest on również odpowiedzialny za odebranie wyniku przetwarzania i udostępnieni
e go do odczytu na węźle zlecającym zadanie.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Zdalny wykonawca
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Zdalny wykonawca to obiekt, który odpowiada za zlecenie wykonania zadania
 na zdalnej maszynie.
\end_layout

\begin_layout Section
Planista
\end_layout

\begin_layout Standard
Elementem systemu decydującym o wyborze miejsca wykonywania 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
wątku rozproszonego
\end_layout

\end_inset

 jest 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
planista
\end_layout

\end_inset

.
 Każda jego realizacja musi być oparta na zdefiniowanym interfejsie.
 Dzięki temu użytkownik może przygotować własną implementację 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
planisty
\end_layout

\end_inset

 dostosowaną do prowadzonego przetwarzania lub wybrać jedną z dostarczonych
 razem z biblioteką.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Planista
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Planista odpowiada za wybór węzła, do którego wysłane zostanie zlecenie
 wykonania zadania.
 Realizuje zdefiniowaną strategię szeregowania zadań w klastrze.
\end_layout

\begin_layout Section
Pamięć rozproszona
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:concept-Rozproszona-pamięć-współdzielona"

\end_inset

Często w ramach przetwarzania rozproszonego zachodzi potrzeba przesyłania
 danych między węzłami.
 W celu jej zrealizowania, jako część biblioteki 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Bluepath
\end_layout

\end_inset

, dostarczana jest abstrakcja 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

.
 Umożliwia ona synchronizację i wymianę danych między działającymi wątkami.
 Zaleca się jednak myślenie i korzystanie z
\begin_inset space ~
\end_inset

niej jako pamięci masowej, ponieważ koszt dostępu do niej może być znacznie
 wyższy niż do pamięci operacyjnej.
 W szczególności nie należy jej mylić z DSM opisaną w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:background-DSM"

\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Pamięć rozproszona
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:concept-Pamiec-rozproszona"

\end_inset

Pamięć rozproszona to pamięć dostępna dla wszystkich węzłów, przez którą
 mogą wymieniać się danymi.
\end_layout

\begin_layout Standard
Implementacja pamięci rozproszonej nie była przedmiotem niniejszej pracy.
 Zdecydowano się zastosować jedno z istniejących rozwiązań spełniających
 następujące założenia:
\end_layout

\begin_layout Itemize
silna spójność danych -- wszystkie węzły odczytują zawsze tę samą, najbardziej
 aktualną wartość,
\end_layout

\begin_layout Itemize
dostępność mechanizmów umożliwiających realizację operacji o semantyce atomowego
 porównania i zapisu (ang.
\begin_inset space ~
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
test and set
\end_layout

\end_inset

) lub atomowego odczytu i zapisu.
\end_layout

\begin_layout Standard
Warto zauważyć, że zgodnie z definicją 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:concept-Pamiec-rozproszona"

\end_inset

 pod pojęciem 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 będziemy rozumieć pamięć, która jest udostępniana przez co najmniej jeden
 węzeł i
\begin_inset space ~
\end_inset

umożliwia współdzielenie danych między wszystkimi węzłami obliczeniowymi
 w
\begin_inset space ~
\end_inset

klastrze.
\end_layout

\begin_layout Standard
W 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 zastosowano klucze -- unikalne ciągi znaków -- jednoznacznie identyfikujące
 dane.
 W trakcie projektowania 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 nie przewidziano zapewnienia hierarchii kluczy.
 Tego typu mechanizm, choć przydatny w
\begin_inset space ~
\end_inset

pewnych przypadkach, może zostać dostarczony przez nadbudowane nad 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięcią rozproszoną
\end_layout

\end_inset

 przez użytkownika abstrakcje.
 Aby zapewnić wysoką użyteczność oraz możliwość rozbudowy 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

, w podstawowym interfejsie przewidziane zostały następujące operacje:
\end_layout

\begin_layout Itemize
zapis (ang.
\begin_inset space ~
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
store
\end_layout

\end_inset

) -- operacja zapisująca dane; w przypadku gdy podany klucz już istnieje
 operacja nie powiedzie się,
\end_layout

\begin_layout Itemize
zapis lub aktualizacja (ang.
\begin_inset space ~
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
store or update
\end_layout

\end_inset

) -- operacja zapisująca dane; w
\begin_inset space ~
\end_inset

przypadku gdy podany klucz istnieje, wartość zostanie nadpisana,
\end_layout

\begin_layout Itemize
aktualizacja (ang.
\begin_inset space ~
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
update
\end_layout

\end_inset

) -- operacja aktualizująca dane -- powiedzie się tylko wtedy, gdy podany
 klucz został wcześniej utworzony w 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize
pobranie (ang.
\begin_inset space ~
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
retrieve
\end_layout

\end_inset

) -- operacja pobierająca dane -- powiedzie się tylko wtedy gdy podany klucz
 został wcześniej utworzony,
\end_layout

\begin_layout Itemize
usunięcie (ang.
\begin_inset space ~
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
remove
\end_layout

\end_inset

) -- operacja usuwająca dane -- powiedzie się tylko wtedy gdy podany klucz
 został wcześniej utworzony w 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Operacje te, choć wystarczające w większości zastosowań, zostały rozwinięte
 o odpowiedniki operujące jednocześnie na grupach kluczy -- zostały one
 opisane w 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Koncepcja-Operacje-zbiorcze"

\end_inset

.
\end_layout

\begin_layout Standard
Dzięki tak zdefiniowanej semantyce operacji, na podstawie 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 można również zbudować bardziej złożone mechanizmy, takie jak 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamki rozproszone
\end_layout

\end_inset

.
 Zamki są wbudowanym mechanizmem w proponowanej bibliotece i są dostępne
 poprzez interfejs 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozszerzonej pamięci rozproszonej
\end_layout

\end_inset

, który został opisany w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Koncepcja-Zamki-rozproszone"

\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Rozszerzona pamięć rozproszona
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Rozszerzona pamięć rozproszona to pamięć rozproszona (def.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:concept-Pamiec-rozproszona"

\end_inset

), która dodatkowo udostępnia abstrakcję zamków.
\end_layout

\begin_layout Subsection
Rozproszone struktury danych i obiekty
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:----Koncepcja-wspoldzielone-struktury-danych"

\end_inset


\begin_inset Flex Name
status open

\begin_layout Plain Layout
Pamięć rozproszona
\end_layout

\end_inset

 -- pomimo tego, że zapewnia operacje niezbędne do komunikacji w trakcie
 przetwarzania -- może okazać się mechanizmem o zbyt niskim poziomie abstrakcji.
 W związku z tym biblioteka dostarcza struktury danych i obiekty oparte
 na 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

: listę, słownik oraz licznik.
\end_layout

\begin_layout Subsubsection*
Lista
\end_layout

\begin_layout Standard
Głównym zadaniem 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
listy rozproszonej
\end_layout

\end_inset

 jest przechowywanie i udostępnianie listy obiektów dostępnej w każdym 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątku rozproszonym
\end_layout

\end_inset

, który zna jej identyfikator.
 Lista ta zachowuje zgodność na poziomie interfejsu z listą dostarczaną
 przez środowisko .NET Framework.
 Podstawowe scenariusze wykorzystania 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
listy rozproszonej
\end_layout

\end_inset

 nie powinny wymagać stosowania dodatkowych mechanizmów synchronizacji.
\end_layout

\begin_layout Subsubsection*
Słownik
\end_layout

\begin_layout Standard
Oprócz listy, często wykorzystywaną strukturą danych jest słownik.
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Słownik rozproszony
\end_layout

\end_inset

 pozwala użytkownikowi na współdzielenie między wątkami kolekcji typu klucz-wart
ość.
 Jednocześnie zapewnia poprawność wykonania współbieżnych operacji, np.
 atomowego dodania nowego klucza oraz zarejestrowania go w wewnętrznym indeksie
 kluczy.
 Podobnie jak lista rozproszona słownik identyfikowany jest przez ciąg znaków,
 który musi być znany wszystkim wątkom chcącym uzyskać do niego dostęp.
\end_layout

\begin_layout Subsubsection*
Licznik
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "par:koncepcja-distributed-counter"

\end_inset

Jedną z podstawowych struktur rozproszonych jest 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
licznik rozproszony
\end_layout

\end_inset

.
 Oprócz standardowych operacji odczytu i ustawienia wartości, umożliwia
 on także atomowe pobranie i zwiększenie wartości.
 
\end_layout

\begin_layout Standard
Obiekt ten może być wykorzystany jako generator unikalnych kluczy lub do
 dynamicznego podziału kolekcji na fragmenty -- każdy 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątek rozproszony
\end_layout

\end_inset

 może pobierać wartość licznika i jednocześnie zwiększać jego wartość o
 
\begin_inset Formula $n$
\end_inset

.
 W ten sposób rezerwuje sobie 
\begin_inset Formula $n$
\end_inset

 obiektów począwszy od odczytanej wartości identyfikatora i każdy z wątków
 może operować na rozłącznym zbiorze obiektów.
\end_layout

\begin_layout Subsection
Operacje zbiorcze
\begin_inset CommandInset label
LatexCommand label
name "sub:Koncepcja-Operacje-zbiorcze"

\end_inset


\end_layout

\begin_layout Standard
Głównym kosztem przetwarzania rozproszonego są narzuty komunikacyjne.
 Wykonywanie 
\begin_inset Formula $n$
\end_inset

 żądań w celu pobrania 
\begin_inset Formula $n$
\end_inset

 elementów z 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 jest wysoce nieefektywne.
 W celu zminimalizowania kosztu komunikacji, dla każdej operacji na 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 zdefiniowano jej odpowiednik przyjmujący jako parametr zbiór kluczy.
 Dodanie tego typu operacji pozwoli użytkownikowi w znaczący sposób zwiększyć
 efektywność swojego przetwarzania (np.
 poprzez jednorazowe pobranie do pamięci lokalnej przetwarzanych danych).
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Operacje zbiorcze
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "def:concept-Operacje-zbiorcze-def"

\end_inset


\end_layout

\begin_layout Definition
Operacje zbiorcze (ang.
\begin_inset space ~
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
bulk operations
\end_layout

\end_inset

) to operacje wykonywane jednocześnie na grupie obiektów o podobnych właściwości
ach znajdujących się w pamięci rozproszonej.
\end_layout

\begin_layout Subsection
Zamki rozproszone
\begin_inset CommandInset label
LatexCommand label
name "sub:Koncepcja-Zamki-rozproszone"

\end_inset


\end_layout

\begin_layout Standard
Przetwarzanie rozproszone oparte na 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątkach rozproszonych
\end_layout

\end_inset

, podobnie jak przetwarzanie równoległe, może wymagać zastosowania sekcji
 krytycznych.
 Operacje na 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 zostały zdefiniowane w taki sposób, aby możliwe było stworzenie 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamków rozproszonych
\end_layout

\end_inset

 -- współdzielonych przez wszystkie węzły w klastrze (w
\begin_inset space ~
\end_inset

odróżnieniu od zamków istniejących jedynie w obrębie jednego procesu bądź
 jednego komputera) -- opartych o ten mechanizm.
 W związku z tym tworzenie i zarządzanie 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamkami rozproszonymi
\end_layout

\end_inset

 jest częścią obowiązków 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozszerzonej pamięci rozproszonej
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Ponieważ reszta biblioteki nie polega na sposobie implementacji zamków,
 a jedynie na gwarancjach jakie oferują, mogą one zostać zaimplementowane
 przez użytkownika w oparciu o mechanizmy niezwiązane z 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięcią rozproszoną
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "s"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Zamek rozproszony
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Zamek rozproszony to zamek, który jest współdzielony przez wszystkie węzły
 w
\begin_inset space ~
\end_inset

klastrze.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Logowanie zdarzeń
\end_layout

\begin_layout Standard
W celu umożliwienia przeglądu przebiegu przetwarzania system udostępnia
 mechanizmy do zapisu historii zdarzeń -- zarówno tych wewnętrznych jak
 i zachodzących w kodzie użytkownika.
 Opcjonalnie, korzystając z abstrakcji 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
listy rozproszonej
\end_layout

\end_inset

, log jest zbierany w 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

.
 Dzięki temu użytkownik nie musi samodzielnie zbierać logów z wszystkich
 węzłów w klastrze -- wystarczy, że na jednym z nich zmaterializuje zawartość
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
listy rozproszonej
\end_layout

\end_inset

 do pliku w celu dalszego przetwarzania i
\begin_inset space ~
\end_inset

wizualizacji np.
 w narzędziach służących do eksploracji procesów.
\end_layout

\begin_layout Section
Obsługa awarii
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:concept-Obsluga-awarii"

\end_inset

W obecnej wersji systemu nie przewiduje się mechanizmów odtwarzania i kontynuowa
nia przetwarzania w przypadku awarii jednego lub większej liczby węzłów.
 Temat ten może być przedmiotem dalszych prac (por.
 punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:conclusions-Obsluga-awarii"

\end_inset

).
\end_layout

\end_body
\end_document
