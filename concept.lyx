#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_modules
dcs
theorems-ams-bytype
theorems-sec-bytype
theorems-ams-extended-bytype
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Koncepcja i projekt systemu
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap:concept"

\end_inset

Proponowany model programowania miał być jak najbardziej naturalny dla programis
tów zaznajomionych z zagadnieniami programowania równoległego i korzystać
 z koncepcji wątków, współdzielonej pamięci oraz zamków.
 Wprowadzone abstrakcje wysokiego poziomu miały na celu ukrycie przez użytkownik
iem leżącego u podstaw programowania rozproszonego mechnizmu przesyłania
 komunikatów.
 Klaster systemu Bluepath zakłada możliwość bezpośredniej komunikacji poprzez
 sieć każdego podłączonego do niego komputera z każdym innym.
 
\end_layout

\begin_layout Section
Architektura systemu
\end_layout

\begin_layout Standard
System składa się z węzłów obliczeniowych połączonych siecią, które posiadają
 informacje o pozostałych zarejestrowanych węzłach.
\begin_inset Note Note
status open

\begin_layout Plain Layout
?? 
\end_layout

\end_inset

 Na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:background-schemat-systemu"

\end_inset

 przedstawiony został schemat architektury systemu.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset External
	template RasterImage
	filename images/schemat-systemu.png
	lyxscale 10
	scale 85

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:background-schemat-systemu"

\end_inset

Schemat architektury systemu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Projektując bibliotekę przyjęliśmy następujące założenia (chodzi np.
 o brak FIFO)
\end_layout

\begin_layout Plain Layout
zarysować problem globalnego obrazu systemu (usługa odnajdywania węzłów)
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status collapsed

\begin_layout Plain Layout
Węzeł obliczeniowy
\end_layout

\end_inset

 
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:background-Wezel-obliczeniowy"

\end_inset

Mianem węzła obliczeniowego (w skrócie: 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
węzła
\end_layout

\end_inset

) określamy komputer, na którym działa usługa zaimplementowana z użyciem
 biblioteki Bluepath, której celem jest zlecenie bądź wykonanie zleconych
 zadań.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Jeżeli na maszynie działa więcej niż jedna instancja aplikacji, każda z
 nich zachowuje się
\begin_inset space \space{}
\end_inset

jak odrębny węzeł.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Komunikacja
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
to powinno być raczej w koncepcji??
\end_layout

\begin_layout Plain Layout
Zastosowane protokoły nie zapewniają żadnych gwarancji co do kolejności
 dostarczonych wiadomości.
 Nie zapewniają również niezawodności dostarczania wiadomości ponad to,
 co oferuje protokół działający w warstwie transportowej -- TCP (def.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:background-TCP"

\end_inset

) -- czyli potwierdzenia i retransmisje.
 Zakładamy jednak, że połączenia w obrębie jednego klastra są na tyle stabilne,
 że nie będzie to powodowało problemów.
\end_layout

\begin_layout Plain Layout
____
\end_layout

\begin_layout Plain Layout
+kolejność wiadomości - dowolna
\end_layout

\begin_layout Plain Layout
+niezawodność dostarczania - jeżeli protokół TCP zgubi wiadomość, mamy problem
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Dla uzyskania transparentności procesu rozpraszania obliczeń przesyłanie
 komunikatów pomiędzy węzłami powinno być ukryte przed użytkownikiem.
 Środowisko miało również zapewnić bezpieczeństwo podczas operacji na współdziel
onych danych przez różne wątki (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
thread safety
\end_layout

\end_inset

), dostarczyć abstrakcje wpółdzielonych kolekcji -- listy, słownika -- oraz
 innych obiektów, np.
 licznika.
 Istotna była też łatwość analizowania błędów.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Usługa odnajdywania węzłów
\end_layout

\begin_layout Standard
Jednym z podstawowych założeń jest posiadanie przez wszystkie węzły w systemie
 lokalnego obrazu stanu wszystkich innych węzłów w klastrze.
 Informacje dotyczące stanu poszczególnych węzłów są dostarczane przez 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługę odnajdywania węzłów
\end_layout

\end_inset

.
 Usługa ta powinna obsługiwać sytuację rejestracji oraz wyrejestrowania
 się węzłów.
 System z założenia abstrahuje od sposobu realizacji tej usługi (czy będzie
 to system scentralizowany, czy rozproszony np.
 oparty na algorytmie plotkującym).
 W związku z pełnioną rolą, 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługa odnajdywania węzłów
\end_layout

\end_inset

 jest kluczowym elementem przy implementacji wykrywania awarii węzłów w
 klastrze.
 Nowe węzły muszą zarejstrować się w usłudze.
 Po rejestracji są one monitorowane dopóki nie opuszczą klastra i wyrejestrują
 się lub ulegną awarii.
 Niedostępne węzły -- tzn.
 takie, które nie odpowiedziały na zapytanie w określonym czasie -- są usuwane
 z klastra.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status collapsed

\begin_layout Plain Layout
Usługa odnajdywania węzłów
\end_layout

\end_inset

 
\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:background-Usluga-odnajdywania-wezlow"

\end_inset

Usługa odnajdywania węzłów to system umożliwiający węzłom odnajdywanie się
 wzajemnie w sieci i łączenie w klaster obliczeniowy.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Zarządca połączeń
\end_layout

\begin_layout Standard
Każdy węzeł powinien przechowywać lokalnie obraz klastra, aby w momencie,
 kiedy zajdzie potrzeba zlecenia zadania jednemu ze 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zdalnych wykonawców
\end_layout

\end_inset

 nie musiał odpytywać usługi katalogowej.
 Tym zadaniem zajmuje się 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zarządca połączeń
\end_layout

\end_inset

.
 Posiada on też dodatkowe informacje, takie jak obciążenie węzłów, które
 mogą zostać wykorzystane przez 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
planistę
\end_layout

\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Zarządca połączeń
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Zarządca połączeń to klient usługi odnajdywania węzłów, który odpowiada
 za rejestrowanie, wyrejestrowywanie i przechowywanie lokalnego obrazu stanu
 klastra na każdym z węzłów.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Section
Rozproszony wątek
\end_layout

\begin_layout Standard
Jednostką przetwarzania w systemie jest 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
rozproszony wątek
\end_layout

\end_inset

.
 Jest on tworzony na podstawie statycznej metody, która przyjmuje dowolną,
 liczbę parametrów i zwraca wartość.
 Wynik przechwytywany jest przez środowisko i udostępniany do odczytu na
 węźle, który zlecił wykonanie wątku.
 Rozproszony wątek może zostać wykonany na dowolnym węźle obliczeniowym
 oraz uruchamiać kolejne rozproszone wątki.
 Decyzja o wyborze miejsca wykonania wątku podejmowana jest z wykorzystaniem
 lokalnej wiedzy o stanie klastra przez 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
planistę
\end_layout

\end_inset

.
\begin_inset Note Note
status open

\begin_layout Plain Layout
postawiony cel/specyfika wymaga rozróżnienia wątku systemu op.
 od naszego
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Rozproszony wątek
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset CommandInset label
LatexCommand label
name "def:background-Rozproszony-watek"

\end_inset

Rozproszony wątek reprezentuje jednostkę przetwarzania w systemie.
 Opakowuje fragment kodu, który może być wykonany na dowolnym węźle obliczeniowy
m.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Section
Wykonawca
\end_layout

\begin_layout Standard
W celu ograniczenia liczby zadań pełnionych przez 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozproszony wątek
\end_layout

\end_inset

 zdefiniowano 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wykonawcę
\end_layout

\end_inset

 -- element odpowiedzialny za wykonywanie wątków zarówno zdalne jak i lokalne.
 Zastosowanie takiej abstrakcji pozwala potraktować przetwarzanie lokalne
 oraz zdalne w podobny sposób.
\begin_inset Note Note
status open

\begin_layout Plain Layout
[wykonawca] specjalizacje wynikają z...
\end_layout

\end_inset


\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Wykonawca
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Wykonawca (i jego specjalizacje -- 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
wykonawca lokalny
\end_layout

\end_inset

, 
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
wykonawca zdalny
\end_layout

\end_inset

) to obiekt, który odpowiada za faktyczne zlecenie wykonania zadania (wykonawca
 zdalny) bądź jego wykonanie (wykonawca lokalny).
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Wykonawca lokalny
\end_layout

\begin_layout Standard
Wszystkie wątki wykonywane lokalnie (zarówno te które pochodzą z lokalnego
 węzła jak i te zlecone przez inny węzeł) są zarządzane przez 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
wykonawców lokalnych
\end_layout

\end_inset

.
 Do zadań 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wykonawcy lokalnego
\end_layout

\end_inset

 należą:
\end_layout

\begin_layout Itemize
rozpoczęcie przetwarzania, 
\end_layout

\begin_layout Itemize
przekierowanie parametrów, 
\end_layout

\begin_layout Itemize
przechwycenie wyjątków,
\end_layout

\begin_layout Itemize
udostępnienie wyników wyższym warstwom po zakończeniu przetwarzania.
\end_layout

\begin_layout Subsection
Wykonawca zdalny
\end_layout

\begin_layout Standard
Reprezentacją zdalnego uruchomienia 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
rozproszonego wątku
\end_layout

\end_inset

 jest obiekt 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
wykonawcy zdalnego
\end_layout

\end_inset

.
 Zleca on wykonanie zadania węzłowi wybranemu przez 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
planistę
\end_layout

\end_inset

 oraz monitoruje stan wykonania zadania (zakończenie, wystąpienie błędów).
 Jest on również odpowiedzialny za odebranie wyniku przetwarzania i udostępnieni
e go do odczytu na węźle zlecającym zadanie.
\end_layout

\begin_layout Section
Planista
\end_layout

\begin_layout Standard
Elementem systemu decydującym o wyborze miejsca wykonywania 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
rozproszonego wątku
\end_layout

\end_inset

 jest 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
planista
\end_layout

\end_inset

.
 Każda jego realizacja musi być oparta na zdefiniowanym interfejsie.
 Dzięki temu użytkownik może przygotować własną implementację 
\begin_inset Flex Name
status collapsed

\begin_layout Plain Layout
planisty
\end_layout

\end_inset

 dostosowaną do prowadzonego przetwarzania lub wybrać jedną z dostarczonych
 razem z biblioteką.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Planista
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Planista odpowiada za wybór węzła, do którego wysłane zostanie zlecenie
 wykonania zadania.
 Realizuje zdefiniowaną strategię szeregowania zadań w klastrze.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Section
Pamięć współdzielona
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:concept-Rozproszona-pamięć-współdzielona"

\end_inset

Często w ramach przetwarzania rozproszonego zachodzi potrzeba komunikacji.
 W celu jej zapewnienia, jako część biblioteki 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Bluepath
\end_layout

\end_inset

, dostarczany jest mechanizm 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

.
 Pamięć ta ma charakter pamięci masowej, a nie pamięci operacyjnej.
\begin_inset Note Note
status open

\begin_layout Plain Layout
(?) 
\end_layout

\end_inset

 Umożliwia ona synchronizację i wymianę danych między działającymi wątkami.
\end_layout

\begin_layout Standard
W celu identyfikacji danych w pamięci współdzielonej zastosowano klucze.
 Klucz jest unikalnym ciągiem znaków jednoznacznie identyfikującym dane.
 W trakcie projektowania 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

 nie przewidziano zapewnienia hierarchii kluczy.
 Tego typu mechanizm, choć przydatny w pewnych przypadkach, może zostać
 dostarczony przez nadbudowane nad 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięcią współdzieloną
\end_layout

\end_inset

 przez użytkownika abstrakcje.
 Aby zapewnić wysoką użyteczność oraz możliwość rozbudowy 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

, w podstawowym interfejsie przewidziane zostały następujące operacje:
\end_layout

\begin_layout Itemize
zapis (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
store
\end_layout

\end_inset

) -- operacja zapisująca dane; w przypadku gdy podany klucz już istnieje
 operacja nie powiedzie się,
\end_layout

\begin_layout Itemize
zapis lub aktualizacja (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
store or update
\end_layout

\end_inset

) -- operacja zapisująca dane; w przypadku gdy podany klucz istnieje, wartość
 zostanie nadpisana,
\end_layout

\begin_layout Itemize
aktualizacja (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
update
\end_layout

\end_inset

) -- operacja aktualizująca dane -- powiedzie się tylko wtedy, gdy podany
 klucz został wcześniej utworzony w pamięci współdzielonej,
\end_layout

\begin_layout Itemize
pobranie (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
retrieve
\end_layout

\end_inset

) -- operacja pobierająca dane -- powiedzie się tylko wtedy gdy podany klucz
 został wcześniej utworzony,
\end_layout

\begin_layout Itemize
usunięcie (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
remove
\end_layout

\end_inset

) -- operacja usuwająca dane -- powiedzie się tylko wtedy gdy podany klucz
 został wcześniej utworzony w pamięci współdzielonej.
\end_layout

\begin_layout Standard
Operacje te, choć wystarczające w większości zastosowań, zostały rozwinięte
 o odpowiedniki operujące jednocześnie na grupach kluczy -- zostały one
 opisane w 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Koncepcja-Operacje-zbiorcze"

\end_inset

.
\end_layout

\begin_layout Standard
Dzięki tak zdefiniowanej semantyce operacji, na podstawie 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

 można również zbudować bardziej złożone mechanizmy, takie jak 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamki rozproszone
\end_layout

\end_inset

.
 Zamki są wbudowanym mechanizmem w proponowanej bibliotece i są dostępne
 poprzez interfejs 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozszerzonej pamięci współdzielonej
\end_layout

\end_inset

, który został opisany w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Koncepcja-Zamki-rozproszone"

\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Pamięć współdzielona
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Pamięć współdzielona to pamięć masowa dostępna dla wszystkich węzłów, przez
 którą mogą wymieniać się danymi.
\end_layout

\begin_layout Subsection
Współdzielone struktury danych i obiekty
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:----Koncepcja-wspoldzielone-struktury-danych"

\end_inset


\begin_inset Flex Name
status open

\begin_layout Plain Layout
Pamięć współdzielona
\end_layout

\end_inset

 -- pomimo tego, że zapewnia operacje niezbędne do komunikacji w trakcie
 przetwarzania -- może okazać się mechanizmem o zbyt niskim poziomie abstrakcji.
 W związku z tym biblioteka dostarcza struktury danych i obiekty oparte
 na 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

: listę, słownik oraz licznik.
\end_layout

\begin_layout Paragraph
Lista
\end_layout

\begin_layout Standard
Głównym zadaniem 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
listy rozproszonej
\end_layout

\end_inset

 jest przechowywanie i udostępnianie listy obiektów dostępnej w każdym 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozproszonym wątku
\end_layout

\end_inset

 w systemie, który zna jej identyfikator.
 Lista ta zachowuje zgodność na poziomie interfejsu z listą dostarczaną
 przez środowisko .NET Framework.
 Podstawowe scenariusze wykorzystania 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
listy rozproszonej
\end_layout

\end_inset

 nie powinny wymagać stosowania dodatkowych mechanizmów synchronizacji.
\end_layout

\begin_layout Paragraph
Słownik
\end_layout

\begin_layout Standard
Ze względu na charakter 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

 (zapisywanie wartości pod pewnym konkretnym kluczem) naturalnym wydaje
 się dostarczenie programiście abstrakcji wzorowanej na słowniku (ang.
 dictionary).
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Słownik rozproszony
\end_layout

\end_inset

 pozwoli użytkownikowi na łatwiejsze zarządzanie kolekcjami typu klucz-wartość
 jednocześnie zapewniając poprawność wykonania pewnych operacji (np.
 atomowe dodanie nowego klucza oraz zarejestrowanie go na liście kluczy).
\begin_inset Note Note
status open

\begin_layout Plain Layout
trochę shitowy ten opis :(
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Licznik
\begin_inset Note Note
status open

\begin_layout Plain Layout
do poprawy
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "par:koncepcja-distributed-counter"

\end_inset

Jedną z podstawowych struktur rozproszonych jest 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
licznik rozproszony
\end_layout

\end_inset

.
 Jego główną cechą -- oprócz atomowego zapisania wartości liczbowej -- jest
 jednoczesne pobranie i zmienienie wartości.
 Pozwala to wykorzystać go jako m.
 in.
 generator kluczy, czy wykorzystać tę strukturę do dynamicznego podziału
 kolekcji na fragmenty -- np.
 każdy 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozproszony wątek
\end_layout

\end_inset

 pobiera wartość licznika i jednocześnie zwiększa jego wartość o 
\begin_inset Formula $n$
\end_inset

.
 W ten sposób wątek rezerwuje sobie 
\begin_inset Formula $n$
\end_inset

 obiektów począwszy od odczytanej wartości identyfikatora.
 Dzięki temu każdy wątek może operować na rozłącznym zbiorze obiektów.
\end_layout

\begin_layout Subsection
Operacje zbiorcze
\begin_inset CommandInset label
LatexCommand label
name "sub:Koncepcja-Operacje-zbiorcze"

\end_inset


\end_layout

\begin_layout Standard
Głównym kosztem przetwarzania rozproszonego są narzuty komunikacyjne.
 Wykonywanie 
\begin_inset Formula $n$
\end_inset

 żądań w celu pobrania 
\begin_inset Formula $n$
\end_inset

 elementów z 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

 jest wysoce nieefektywne.
 W celu zminimalizowania kosztu komunikacji, dla każdej operacji na 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

 zdefiniowano jej odpowiednik przyjmujący jako parametr zbiór kluczy.
 Dodanie tego typu operacji pozwoli użytkownikowi w znaczący sposób zwiększyć
 efektywność swojego przetwarzania (np.
 poprzez jednorazowe pobranie do pamięci lokalnej przetwarzanych danych).
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Operacje zbiorcze
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Operacje zbiorcze (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
bulk operations
\end_layout

\end_inset

) to operacje wykonywane jednocześnie na grupie obiektów o podobnych właściwości
ach.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-- separator definicji --
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Zamki rozproszone
\begin_inset CommandInset label
LatexCommand label
name "sub:Koncepcja-Zamki-rozproszone"

\end_inset


\end_layout

\begin_layout Standard
Przetwarzanie rozproszone oparte na 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozproszonych wątkach
\end_layout

\end_inset

, podobnie jak przetwarzanie równoległe, może wymagać zastosowania sekcji
 krytycznych.
 Operacje na 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci współdzielonej
\end_layout

\end_inset

 zostały zdefiniowane w taki sposób, aby możliwe było stworzenie 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamków rozproszonych
\end_layout

\end_inset

 opartych o ten mechanizm.
 W związku z tym tworzenie i zarządzanie 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamkami rozproszonymi
\end_layout

\end_inset

 jest częścią obowiązków 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozszerzonej pamięci współdzielonej
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Ponieważ reszta infrastruktury
\begin_inset Note Note
status open

\begin_layout Plain Layout
co to infrastruktura??
\end_layout

\end_inset

 nie polega na sposobie implementacji zamków (a jedynie na zapewnieniach
\begin_inset Note Note
status open

\begin_layout Plain Layout
nie wiem jak to inaczej nazwać
\end_layout

\end_inset

 jakie oferują) mogą one zostać zaimplementowane w oparciu o mechanizmy
 nie związane z 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięcią współdzieloną
\end_layout

\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Zamek rozproszony
\end_layout

\end_inset


\end_layout

\begin_layout Definition
Zamek rozproszony to zamek, który jest współdzielony przez wszystkie węzły
 w klastrze (w odróżnieniu od zamków istniejących jedynie w obrębie jednego
 procesu bądź jednego komputera).
\end_layout

\begin_layout Section
Logowanie zdarzeń
\end_layout

\begin_layout Standard
W celu umożliwienia przeglądu przebiegu przetwarzania system udostępnia
 mechanizmy do zapisu historii zdarzeń -- zarówno tych wewnętrznych jak
 i zachodzących w kodzie użytkownika.
 Opcjonalnie, korzystając z abstrakcji 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozproszonej listy
\end_layout

\end_inset

, log jest zbierany we 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
współdzielonej pamięci
\end_layout

\end_inset

.
 Dzięki temu użytkownik nie musi samodzielnie zbierać logów z wszystkich
 węzłów w klastrze -- wystarczy, że na jednym z nich zmaterializuje zawartość
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozproszonej listy
\end_layout

\end_inset

 do pliku w celu dalszego przetwarzania i wizualizacji np.
 w narzędziach służących do eksploracji procesów.
\end_layout

\end_body
\end_document
