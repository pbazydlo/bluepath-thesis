#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Podsumowanie
\end_layout

\begin_layout Standard
Niniejszy rozdział stanowi podsumowanie pracy.
 Omówiono w nim przebieg realizacji, napotkane w trakcie implementacji problemy
 oraz przedstawiono potencjalne kierunki dalszego rozwoju projektu.
\end_layout

\begin_layout Section
Przebieg realizacji
\end_layout

\begin_layout Standard
W trakcie realizacji tej pracy udało się zrealizować główny cel -- zaprojektowan
ie biblioteki wspomagającej użytkowników w implementacji aplikacji rozproszonych
 (por.
 punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:intro-cel-i-zakres"

\end_inset

).
 Wszystkie przyjęte założenia były weryfikowane poprzez implementację prototypu
 opisaną w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:implementation"

\end_inset

.
 W obecnym momencie biblioteka posiada zależność jedynie od usługi Redis
 wykorzystywanej do realizacji 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

.
 Należy jednak nadmienić, że zależność tę można w łatwy sposób usunąć poprzez
 dostarczenie własnej implementacji 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

 co jest możliwe dzięki modułowości biblioteki.
\end_layout

\begin_layout Standard
Biblioteka i założenia poczynione przy jej tworzeniu zostały dodatkowo zweryfiko
wane poprzez implementację aplikacji opisanych w rozdziale 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:applications"

\end_inset

.
 Możliwość wykorzystania 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
debuggera
\end_layout

\end_inset

 w trakcie tworzenia tych aplikacji oraz testowania działania biblioteki
 okazała się niezastąpiona i stanowiła duży atut.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Celem pracy było zaprojektowanie biblioteki, która, bez skomplikowanej konfigura
cji czy instalowania wielu składników, pozwoli programistom w prosty sposób
 zaimplementować przetwarzanie rozproszone.
 Programista pisząc program jak równoległy, powinien uzyskać program wykorzystuj
ący moc obliczeniową wielu w węzłów w klastrze.
 W takim przypadku wątki, zamiast wykonywać się na wielu rdzeniach jednego
 procesora, mogą wykonywać się na zdalnych maszynach.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Napotkane problemy
\end_layout

\begin_layout Standard
W trakcie realizacji pracy napotkano problemy, których opis i rozwiązania
 opisano poniżej.
 Ich natura była bardzo różna, wynikały głównie z błędów i ograniczeń w
\begin_inset space ~
\end_inset

wykorzystywanym kodzie pochodzącym od innych twórców:
\end_layout

\begin_layout Itemize
serializacja wyjątków,
\end_layout

\begin_layout Itemize
niezaimplementowane do końca wewnętrzne metody w Rhino DHT,
\end_layout

\begin_layout Itemize
ograniczenie wydajności środowiska Redis w wyniku przenoszenia kodu z systemu
 Linux do systemu Windows,
\end_layout

\begin_layout Itemize
błędy składniowe w plikach XML Schema Definition pochodzących z bibliteki
 OpenXES.
\end_layout

\begin_layout Subsection
Serializacja
\end_layout

\begin_layout Standard
Wszystkie wyjątki w .NET Framework powinny być serializowalne.
 Okazuje się jednak, że klasa bazowa 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Exception
\end_layout

\end_inset

 zawiera wirtualne pole 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Data
\end_layout

\end_inset

 typu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IDictionary
\end_layout

\end_inset

, które umożliwia dodanie do kolekcji obiektu, który nie będzie serializowalny.
 Pomimo tego, że każdy wstawiany obiekt jest sprawdzany pod tym kątem poprzez
 sprawdzenie flagi 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Type.IsSerializable
\end_layout

\end_inset

, nie gwarantuje to, że jego składowe będą serializowalne, a tym samym i
 cały wyjątek.
 
\end_layout

\begin_layout Standard
Drugim problemem jest zachowanie klasy 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
DataContractSerializer
\end_layout

\end_inset

.
 Zakładając, że definicja wiadomości (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
DataContract
\end_layout

\end_inset

) zawiera pole typu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Exception
\end_layout

\end_inset

, w którym ma zostać przesłany wyjątek, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
DataContractSerializer
\end_layout

\end_inset

 wymaga dodania atrybutu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KnownType
\end_layout

\end_inset

 dla każdego typu wyjątku wywiedzionego z typu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Exception
\end_layout

\end_inset

, który ma zostać przesłany na zdalną stronę, również tego zawartego w polu
 na wyjątek wewnętrzny (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
InnerException)
\end_layout

\end_inset

.
 Dodawanie atrybutu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
KnownType
\end_layout

\end_inset

 dla każdego typu wyjątku, który może zostać wygenerowany przez kod użytkownika
 jest rozwiązaniem dalekim od transparentnego, w związku z tym zdecydowano
 o przesyłaniu wyjątków w formie tekstowej -- wywoływana jest na nich rekurencyj
nie metoda 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ToString
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Rhino DHT
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "par:problemy-rhino-dht"

\end_inset

W punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:implementation-Pamiec-rozproszona-rozwazane-rozwiazania"

\end_inset

, gdzie opisano wybór aplikacji do zrealizowania 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
pamięci rozproszonej
\end_layout

\end_inset

, zasygnalizowano problem, który był powodem porzucenia biblioteki Rhino
 DHT.
 Zgodnie z założeniami przedstawionymi w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:concept-Pamiec-rozproszona"

\end_inset

, biblioteka powinna udostępniać mechanizmy atomowego porównania i zapisu
 bądź atomowego odczytu i zapisu.
 Przykładowa implementacja 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
zamka rozproszonego
\end_layout

\end_inset

 miała opierać się o mechanizm wersjonowania danych obecny w Rhino DHT:
\end_layout

\begin_layout Itemize
pobranie aktualnej, najnowszej wersji pola reprezentującego wartość zamka
 (wolny/zajęty przez wykonawcę o danym 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
eid
\end_layout

\end_inset

) wraz z numerem wersji 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
k
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize
w przypadku gdy zamek jest wolny -- zapis nowej wersji wartości pola (własnego
 identyfikatora 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
eid
\end_layout

\end_inset

) ze wskazaniem wersji 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
k
\end_layout

\end_inset

 jako rodzica,
\end_layout

\begin_layout Itemize
odczyt wersji 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
k+1
\end_layout

\end_inset

 i porównanie z własnym eid -- jeżeli jest równe oznacza to, że zamek został
 pobrany, w przeciwnym wypadku -- że został zajęty przez inny proces,
\end_layout

\begin_layout Itemize
zwolnienie zamka odbywać się miała poprzez zapis odpowiedniej informacji
 ze wskazaniem wersji 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
k+1
\end_layout

\end_inset

 jako rodzica.
\end_layout

\begin_layout Standard
Widać zatem, że zapisy miały tworzyć strukturę drzewiastą, gdzie najdłuższa
 ścieżka miała reprezentować sekwencję pobranych i zwolnionych zamków.
 Niestety wewnętrznie nie wszystkie operacje zostały zaimplementowane, co
 objawiało się wyjątkiem 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
NotImplementedException
\end_layout

\end_inset

 zgłaszanym z wewnątrz biblioteki Rhino DHT.
\end_layout

\begin_layout Subsection
Redis uruchamiany w systemie Windows
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "par:problemy-Windows-Redis"

\end_inset

Podczas pracy usługi Redis z dużym obciążeniem pod kontrolą systemu Windows
 zaobserwowano znaczący spadek wydajności.
 Wyjaśnienie problemów z działaniem znaleziono w dokumencie 
\begin_inset CommandInset citation
LatexCommand cite
key "MSOpenTech-Redis-Release-Notes"

\end_inset

.
 
\end_layout

\begin_layout Standard
W wersji dla systemu Linux wszystkie operacje wejścia-wyjścia korzystają
 z deskryptorów plików, które nie są tak rozpowszechnione w API systemu
 Windows.
 Wersja przeznaczona dla systemów Windows używa w związku z tym symulowanego
 deskryptora plików.
 Zasadniczym problemem jest jednak brak obecności wywołania systemowego
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
fork
\end_layout

\end_inset

 do tworzenia procesów potomnych, która w systemie Windows została zasymulowana
 poprzez umieszczenie sterty procesu Redis w 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
memory-mapped file
\end_layout

\end_inset

, czyli fragmencie pamięci wirtualnej, która jest dokładnym odwzorowaniem
 pliku znajdującego się na dysku lub -- w ogólności -- obiektu, do którego
 jesteśmy w stanie uzyskać deskryptor.
 Taki deskryptor przekazywany jest następnie potomnym procesom.
 Warto zauważyć, że domyślnym zachowaniem środowiska jest tworzenie współdzielon
ego pliku o rozmiarze odpowiadającym rozmiarowi pamięci fizycznej komputera.
 
\end_layout

\begin_layout Standard
Ostatecznie różnice, które ujawniły się pomiędzy wersją usługi Redis przeznaczon
ą dla systemów Windows a pochodnych UNIXa, wpłynęły na podjęcie decyzji
 o uruchomieniu go w systemie operacyjnym Ubuntu.
\end_layout

\begin_layout Subsection
Implementacja standardu OpenXES
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:problemy-Implementacja-standardu-OpenXES-z-XSD"

\end_inset

Podczas próby implementacji standardu OpenXES opisanej w punkcie 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:implementation-Logowanie-zdarzen"

\end_inset

 na podstawie plików XML Schema udostępnionych 28 marca 2014 r.
 wraz z wersją 2.0 bibliteki napotkano problemy przy próbie automatycznego
 wygenerowania klas.
 W
\begin_inset space ~
\end_inset

jednym z plików, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
xes.xsd
\end_layout

\end_inset

, znaleziony został drobny błąd składniowy -- brakująca spacja, co powodowało,
 że plik XML był niepoprawny składniowo i nieprzyjmowany przez narzędzie
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
xsd.exe
\end_layout

\end_inset

.
 Po jego poprawieniu ujawnił się kolejny problem objawiający się wyjątkiem
 przepełnienia stosu w trakcie generowania klas.
 Ten problem został rozwiązany przez objęcie wnętrza elementu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
xs:complexType
\end_layout

\end_inset

 odnoszącego się do typu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
AttributableType
\end_layout

\end_inset

 elementem 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
xs:sequence
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Perspektywy dalszego rozwoju
\end_layout

\begin_layout Standard
Przy projektowaniu biblioteki Bluepath został zdefiniowany szereg założeń
 oraz podjęto szereg decyzji projektowych przedstawionych w rozdziałach
 trzecim i czwartym.
 Poniżej wskazano potencjalne kierunki rozwoju projektu -- rozluźniania
 pewnych założeń i rozbudowy funkcjonalności.
\end_layout

\begin_layout Subsection
Niezawodność przetwarzania
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:conclusions-Obsluga-awarii"

\end_inset

Aspektem, który nie został poruszony w niniejszej pracy jest zapewnienie
 niezawodności przetwarzania w przypadku awarii węzłów (por.
 punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:concept-Obsluga-awarii"

\end_inset

).
 Poniżej zaproponowano sposoby obsługi awarii różnych komponentów -- mogą
 one dotyczyć węzłów danych, węzłów obliczeniowych a także 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługi odnajdywania węzłów
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Obsługa awarii węzłów danych
\end_layout

\begin_layout Standard
Zapewnienie bezpieczeństwa węzłów danych leży po stronie wybranej do ich
 zrealizowania aplikacji (por.
 punkt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:concept-Rozproszona-pamięć-współdzielona"

\end_inset

).
 Wykorzystywany obecnie system Redis może zostać uruchomiony w trybie z
 replikacją, w którym jeden z węzłów jest punktem dostępowym do zapisu lub
 odczytu, a jego repliki udostępniają dane tylko do odczytu.
 Po awarii węzła nadrzędnego jedna z replik staje się nowym punktem dostępowym
 z możliwością zapisu.
\end_layout

\begin_layout Standard
Istnieje również wariant systemu -- Redis Cluster -- w którym dane dzielone
 są pomiędzy węzły, udostępniający mechanizmy replikacji i rekonfiguracji
 w przypadku awarii.
\begin_inset Note Note
status open

\begin_layout Plain Layout
?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Obsługa awarii węzłów obliczeniowych
\end_layout

\begin_layout Standard
W przypadku, gdy aplikacja nie posiada współdzielonego stanu, czyli nie
 wykorzystuje rozproszonych struktur danych ani obiektów -- a więc wywołania
 są idempotentne -- obsługa awarii węzłów obliczeniowych mogłaby uwzględniać
 drzewiasty charakter takiego przetwarzania.
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Wątki rozproszone
\end_layout

\end_inset

 zainicjowane przez stracony węzeł musiałyby być wycofane, a węzeł nadrzędny
 musiałby zlecić jeszcze raz wykonanie przerwanego wątku.
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
Wątki rozproszone
\end_layout

\end_inset

, które mogą być bezpiecznie uruchamiane ponownie musiałyby być 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
explicite
\end_layout

\end_inset

 oznaczane przez programistę flagą (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Resumable
\end_layout

\end_inset

) lub z wykorzystaniem dedykowanej metody (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
AsResumable
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Subsubsection*
Obsługa awarii serwera usługi odnajdywania węzłów
\end_layout

\begin_layout Standard
Wrażliwym punktem jest również scentralizowany serwer 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługi odnajdywania węzłów
\end_layout

\end_inset

.
 Warto jednak zauważyć, że prawdopodobieństwo awarii jednego konkretnego
 węzła jest dużo niższe niż prawdopodobieństwo awarii dowolnego węzła w
 klastrze.
 Argumentem, który przemawia za koniecznością zajęcia się tym problemem
 jest kluczowe znaczenie serwera 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługi odnajdywania węzłów
\end_layout

\end_inset

 do realizacji przetwarzania.
 Aby zapewnić niezawodność dostępu do 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
usługi odnajdywania węzłów
\end_layout

\end_inset

 możnaby uruchomić jego replikę, która przejęłaby zadania po awarii podstawowego
 serwera (podejście to wykorzystywane jest np.
 w MapReduce, gdzie 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
name node
\end_layout

\end_inset

 jest replikowany).
 Warto również rozważyć implementację opartą o rozproszoną tablcę haszową
 (ang.
\begin_inset space ~
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
distributed hash table
\end_layout

\end_inset

, DHT) z replikacją.
\end_layout

\begin_layout Subsection
Rozbudowa funkcjonalności
\end_layout

\begin_layout Standard
Ponieważ z przetwarzaniem rozproszonym wiąże się wiele problemów, a przy
 tworzeniu biblioteki zauważano kolejne obszary w których możnaby zmniejszyć
 nakład pracy użytkownika nie było możliwe zrealizowanie wszystkich funkcji.
 Poniżej przedstawiono przykładowe obszary, w których możnaby rozbudować
 funkcjonalność systemu:
\end_layout

\begin_layout Itemize
rozproszone struktury danych -- np.
 implementacja kolejki,
\end_layout

\begin_layout Itemize
interfejs do komunikacji z systemem -- rozbudowa o metody dostępu do pamięci
 lokalnej węzła (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
LocalStorage
\end_layout

\end_inset

), dodanie możliwości raportowania zaawansowania przetwarzania w ramach
 wątku (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ReportProgress
\end_layout

\end_inset

) w celu budowy dokładniejszych planistów,
\end_layout

\begin_layout Itemize
DLINQ -- implementacja pozostałych metod obecnych w standardowym LINQ i
 niedostępnych w obecnej implementacji,
\end_layout

\begin_layout Itemize
wykorzystanie asynchronicznych wzorców z .NET Framework 4.5 (
\begin_inset Flex Code
status open

\begin_layout Plain Layout
async
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
await
\end_layout

\end_inset

) -- obecnie jedyną operacją asynchroniczną jest oczekiwanie na zakończenie
 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
wątku rozproszonego
\end_layout

\end_inset

 -- 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
JoinAsync
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Zakończenie
\end_layout

\begin_layout Standard
W niniejszej pracy przeanalizowano i porównano istniejące rozwiązania wspomagają
ce programistów w tworzeniu aplikacji rozproszonych.
 Zaprojektowano i zaimplementowano prototyp biblioteki, która pozwala jej
 użytkownikom w prosty sposób zaimplementować program przetwarzający dane
 w sposób rozproszony.
 Użytkownik pisząc program w sposób podobny do tego w jaki pisałby program
 równoległy, uzyskuje program wykorzystujący moc obliczeniową wielu węzłów
 w klastrze.
 W takim przypadku wątki, zamiast wykonywać się na wielu rdzeniach jednego
 procesora, wykonują się na zdalnych maszynach.
 Prototyp biblioteki został przetestowany zarówno jakościowo jak i wydajnościowo.
 Przedstawiono również przykładowe zastosowania biblioteki.
 Biorąc powyższe pod uwagę można uznać, że wszystkie założone cele pracy
 zostały zrealizowane.
\end_layout

\end_body
\end_document
