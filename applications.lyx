#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_modules
dcs
\end_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Przykładowe zastosowania
\end_layout

\begin_layout Standard
W tym rozdziale przedstawione zostaną przykladowe zastosowania systemu Bluepath.
 Na bazie rozproszonych wątków, współdzielonej rozproszonej pamięci i nadbudowan
ych nad nią abstrakcji listy i słownika przygotowane zostały projekty:
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
DLINQ
\end_layout

\end_inset

 (ang.
 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Distributed Language Integrated Query
\end_layout

\end_inset

) -- dostawca metod manipulacji kolekcji w sposób zgodny z obecnym już w
 środowisku .NET dla standardowych, nierozproszonych kolekcji, 
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
MapReduce
\end_layout

\end_inset

 -- abstrakcja specjalizowana do uruchamiania zadań w modelu mapowania i
 redukcji z możliwością zlecania zadań bez rekompilacji systemu i dystrybuowania
 nowej wersji plików wykonywalnych na węzły -- kod 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Mappera
\end_layout

\end_inset

 i 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Reducera
\end_layout

\end_inset

 jest pobierany ze współdzielonej pamięci i kompilowany przed wykonaniem
 na węzłach, 
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Autocomplete
\end_layout

\end_inset

 -- 
\end_layout

\begin_layout Itemize
\begin_inset Flex Strong
status open

\begin_layout Plain Layout
Obliczanie przybliżenia liczby 
\begin_inset Formula $\pi$
\end_inset


\end_layout

\end_inset

 -- 
\end_layout

\begin_layout Section
DLINQ
\end_layout

\begin_layout Standard
Częściowa implementacja proof of concept
\end_layout

\begin_layout Standard
AsDistributed
\end_layout

\begin_layout Standard
GroupBy, SelectMany, Select, Where
\end_layout

\begin_layout Section
MapReduce
\end_layout

\begin_layout Standard
W celu porównania pracochłonności implementacji aplikacji z użyciem bibliteki
 Bluepath i bez niej przygotowane zostały aplikacje do realizacji przetwarzania
 w modelu mapowania i redukcji zarówno w środowisku Bluepath jak i bezpośrednio
 z wykorzystaniem platformy Windows Communication Foundation 
\begin_inset CommandInset citation
LatexCommand cite
key "MSDN:WhatIsWindowsCommunicationFoundation"

\end_inset

.
 Założeniem aplikacji było, by kod metod 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Map
\end_layout

\end_inset

 i 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Reduce
\end_layout

\end_inset

 dostarczany był jako kod źródłowy w języku C# w formie klasy implementującej
 odpowiedni interfejs -- 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IMapProvider
\end_layout

\end_inset

 lub 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
IReduceProvider
\end_layout

\end_inset

 -- przedstawiony na listingu 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:applications-MapReduce-IMapProvider-IReduceProvider"

\end_inset

 i składowany razem z danymi w pamięci współdzielonej.
 Kompilacja kodu miała odbywać się na węzłach bezpośrednio przed wykonaniem
 metody.
 Innym podejściem mogłoby być dostarczanie kodu w formie bibliotek dołączanych
 dynamicznie (
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
.NET assembly
\end_layout

\end_inset

).
 Rozwiązanie zostało odrzucone z powodu potencjalnych problemów z wyładowywaniem
 kodu z pamięci przed rozpoczęciem kolejnego zadania.
\begin_inset Note Note
status open

\begin_layout Plain Layout
piszemy o tym? więcej w problemach? były małe testy z addonami
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,language=C"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:applications-MapReduce-IMapProvider-IReduceProvider"

\end_inset

Interfejsy IMapProvider i IReduceProvider 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

public interface IMapProvider 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    IEnumerable<KeyValuePair<string, string>> Map(string key, string value);
 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface IReduceProvider 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    KeyValuePair<string, string> Reduce(string key, IEnumerable<string>
 values); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Główną klasą w aplikacji był 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
koordynator
\end_layout

\end_inset

.
 Z wykorzystaniem biblioteki Bluepath jego zadanie sprowadzało się w pierwszej
 fazie przetwarzania do uruchomienia 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
rozproszonych wątków
\end_layout

\end_inset

 w liczbie odpowiadającej liczbe plików wejściowych
\begin_inset Note Note
status open

\begin_layout Plain Layout
z tą liczbą do sprawdzenia (?)
\end_layout

\end_inset

, które były inicjowane metodą, która:
\end_layout

\begin_layout Itemize
ładowała kod metody 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Map
\end_layout

\end_inset

 ze współdzielonej pamięci, 
\end_layout

\begin_layout Itemize
wykonywała skompilowany kod 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
mappera
\end_layout

\end_inset

 na wskazanym fragmencie danych wejściowych ze współdzielonej pamięci,
\end_layout

\begin_layout Itemize
zapisywała wygenerowane pary klucz--wartość do współdzielonej pamięci,
\end_layout

\begin_layout Itemize
zwracała listę kluczy jako wynik wykonania rozproszonego wątku do 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
koordynatora
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Zainicjowane w ten sposób wątki były następnie uruchamiane z parą parametrów
 -- nazwą pliku zawierającego dane do przetworzenia oraz nazwą pliku z kodem
 źródłowym metody 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Map
\end_layout

\end_inset

.
 W drugiej fazie przetwarzania tworzonych było tyle rozproszonych wątków,
 ile kluczy było wynikiem pierwszej fazy
\begin_inset Note Note
status open

\begin_layout Plain Layout
z tą liczbą do sprawdzenia (?)
\end_layout

\end_inset

.
 Każdy z nich inicjowany był metodą, która:
\end_layout

\begin_layout Itemize
ładowała kod metody 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Reduce
\end_layout

\end_inset

 ze współdzielonej pamięci,
\end_layout

\begin_layout Itemize
wykonywała skompilowany kod 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
reducera
\end_layout

\end_inset

 na wskazanym fragmencie danych wejściowych ze współdzielonej pamięci,
\end_layout

\begin_layout Itemize
zapisywała wygenerowane pary klucz--wartość do współdzielonej pamięci,
\end_layout

\begin_layout Itemize
zwracała listę kluczy jako wynik wykonania rozproszonego wątku do 
\begin_inset Flex Name
status open

\begin_layout Plain Layout
koordynatora
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Autocomplete
\end_layout

\begin_layout Standard
Przetwarzania dokumentów - prefixy do autocomplete...
 
\end_layout

\begin_layout Section
Obliczanie przybliżenia liczby 
\begin_inset Formula $\pi$
\end_inset


\end_layout

\begin_layout Standard
Rozproszone liczenie PI.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
-> Metoda Monte Carlo
\end_layout

\end_inset


\end_layout

\end_body
\end_document
